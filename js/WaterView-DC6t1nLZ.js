var n=Object.defineProperty,e=(e,a,t)=>((e,a,t)=>a in e?n(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t)(e,"symbol"!=typeof a?a+"":a,t);import{B as a}from"./base-C9hChz8a.js";import{h as t,B as o,s as r,z as s,P as l}from"./three-BV2RzHAl.js";import{d as i,z as m,A as u,g as c,j as g,F as d,o as f}from"./@vue-B4sUqkWa.js";const v=i({__name:"WaterView",setup(n){const i=new class extends a{constructor(){super(),e(this,"uniforms",{uTime:{value:0},uNormals:{value:null}})}load(){var n;this.init("#webgl"),null==(n=this.renderer)||n.setClearColor(336700),this.animate(),this.create()}create(){var n;const e=(new t).load("./texture/sphere-normal.jpg");this.uniforms.uNormals={value:e};const a=1e4,i=new o,m=new Float32Array(3e4),u=new Float32Array(3e4),c=new Float32Array(a);for(let t=0;t<2e4;t+=3)m[t+0]=Math.random()-.5,m[t+1]=Math.random()-.5,m[t+2]=Math.random()-.5,u[t+0]=Math.random(),u[t+1]=Math.random(),u[t+2]=Math.random(),c[t+0]=.75*Math.random()+.5;i.setAttribute("position",new r(m,3)),i.setAttribute("aRandom",new r(u,3)),i.setAttribute("aSize",new r(c,1));const g=new s({transparent:!0,uniforms:this.uniforms,vertexShader:"\n        float PI = 3.141592653589793238;\n\n        vec3 getPos(float progress){            \n            float angle = progress * PI * 2.0;\n            float x = sin(angle) + 2.0 * sin(2.0 * angle);\n            float y = cos(angle) - 2.0 * cos(2.0 * angle);\n            float z = -sin(angle * 3.0);\n            return vec3(x, y, z);\n        }\n        \n        vec3 getTangent(float progress){            \n            float angle = progress * PI * 2.0;\n            float x = -cos(angle) + 4.0 * cos(2.0 * angle);\n            float y = -sin(angle) + 4.0 * sin(2.0 * angle);\n            float z = 3.0 *  -cos(angle * 3.0);\n            return normalize(vec3(x, y, z));\n        }\n        vec3 getNormal(float progress){            \n            float angle = progress * PI * 2.0;\n            float x = -sin(angle) - 8.0 * sin(2.0 * angle);\n            float y = -cos(angle) + 8.0 * cos(2.0 * angle);\n            float z = 9.0 *  -sin(angle * 3.0);\n            return normalize(vec3(x, y, z));\n        }\n\n        attribute vec3 aRandom;\n        attribute float aSize;\n\n        uniform float uTime;\n\n        varying vec2 vUv;\n\n        void main(){\n            vUv = uv;\n\n            vec3 pos = position;\n            float progress = fract(uTime * 0.01  + aRandom.x);\n\n            pos = getPos(progress);\n            vec3 normal = getNormal(progress);\n            vec3 tangent = getTangent(progress);\n            vec3 biNormal = normalize(cross(normal, tangent));\n\n            float radius = 0.3 + aRandom.z * 0.2;\n            float cx = radius * cos(aRandom.y* 2.0 * PI * uTime * 0.1 + aRandom.z * 7.0);\n            float cy = radius * sin(aRandom.y * 2.0 * PI * uTime * 0.1 + aRandom.z * 7.0);\n\n            pos += normal * cx + biNormal * cy;\n            pos *= 50.0;\n            vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);\n            gl_PointSize = aSize * 15.0;\n            gl_Position = projectionMatrix * mvPosition;\n        }\n      ",fragmentShader:"\n\n        uniform float time;\n        uniform sampler2D uNormals;\n\n        void main(){\n            vec3 color = vec3(0.136, 0.559, 0.832);\n            vec2 st = gl_PointCoord.xy;\n            float disc = length(st - vec2(0.5));\n            float alpha = smoothstep(0.5, 0.4, disc);\n            vec4 normalTexture = texture2D(uNormals, st);\n            gl_FragColor = vec4(normalTexture.rgb, alpha);\n        }\n      "}),d=new l(i,g);null==(n=this.scene)||n.add(d)}animate(){var n,e,a;null==(n=this.stats)||n.begin(),requestAnimationFrame((()=>{this.animate()})),this.uniforms.uTime.value+=.05,null==(e=this.renderer)||e.render(this.scene,this.camera),null==(a=this.stats)||a.end()}};return m((()=>{i.load()})),u((()=>{i.gui.close(),i.gui.destroy()})),(n,e)=>(f(),c(d,null,[e[0]||(e[0]=g("div",{id:"webgl"},null,-1)),e[1]||(e[1]=g("div",{class:"title-name"},"æ°´",-1))],64))}});export{v as default};

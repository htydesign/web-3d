var e=Object.defineProperty,n=(n,t,i)=>((n,t,i)=>t in n?e(n,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):n[t]=i)(n,"symbol"!=typeof t?t+"":t,i);import{B as t}from"./base-C-YIOOil.js";import{V as i,B as o,u as s,C as a,A as r,l as m,P as l}from"./three-BzDGKvaz.js";import{d as u,z as h,A as c,g as d,j as v,F as w,o as P}from"./@vue-B4sUqkWa.js";const f=u({__name:"FireWorksView",setup(e){class u{constructor(){n(this,"mesh")}init(e,n,t){const i=new o,a=100,u=new Float32Array(300);i.setAttribute("position",new m(u,3));const h=new Float32Array(300);i.setAttribute("toPosition",new m(h,3));const c=new Float32Array(a);i.setAttribute("aSize",new m(c,1));for(let o=0;o<a;o++){u[3*o]=n.x,u[3*o+1]=n.y,u[3*o+2]=n.z;const e=Math.random()*Math.PI*2,t=Math.random()*Math.PI*2,i=50*Math.random();h[3*o]=i*Math.sin(e)+i*Math.sin(t),h[3*o+1]=i*Math.cos(e)+i*Math.cos(t),h[3*o+2]=i*Math.sin(e)+i*Math.cos(t),c[o]=5*Math.random()+5}const d=new s({transparent:!0,blending:r,depthTest:!1,uniforms:{uTime:{value:0},uColor:{value:t}},vertexShader:"\n        attribute vec3 toPosition;\n        uniform float uTime;\n        void main(){\n            vec3 myPosition = position;\n            myPosition += toPosition * uTime;\n            \n\n            vec4 mvPosition = modelViewMatrix * vec4(myPosition, 1.0);\n           \n\n            gl_PointSize = 100.0 * 50.0 / -mvPosition.z * (1.0 - abs(sin(uTime)));\n\n            gl_Position = projectionMatrix * mvPosition;\n            \n        }\n      ",fragmentShader:"\n        uniform vec3 uColor;\n        void main(){\n            float alpha = 1.0 - distance(gl_PointCoord,vec2(0.5)) * 2.0;\n            gl_FragColor = vec4(uColor, alpha);\n        }\n      "});this.mesh=new l(i,d),this.mesh.onBeforeRender=()=>{d.uniforms.uTime.value+=.01,d.uniforms.uTime.value>=1.1&&this.dispose(e)},e.add(this.mesh)}dispose(e){var n;null==(n=this.mesh)||n.clear(),e.remove(this.mesh)}}class f{constructor(){n(this,"mesh")}init(e){const n=new i(0,0,0),t=new i(50*Math.random()-25,50*Math.random()+25,0),h=new o,c=new s({uniforms:{uTime:{value:0},uColor:{value:new a(Math.random(),Math.random(),Math.random())}},vertexShader:"\n        attribute vec3 toPosition;\n        uniform float uTime;\n       \n        void main(){\n            vec3 myPosition = position;\n            myPosition += toPosition * uTime;\n\n            vec4 mvPosition = modelViewMatrix * vec4(myPosition, 1.0);\n\n            gl_PointSize = 100.0 * 50.0 / -mvPosition.z;\n\n            gl_Position = projectionMatrix * mvPosition;\n            \n        }\n      ",fragmentShader:"\n        uniform vec3 uColor;\n        void main(){\n            float alpha = 1.0 - distance(gl_PointCoord,vec2(0.5)) * 2.0;\n            gl_FragColor = vec4(uColor, alpha);\n        }\n      ",transparent:!0,blending:r,depthTest:!1}),d=new Float32Array(n);h.setAttribute("position",new m(d,3)),h.setAttribute("toPosition",new m(new Float32Array(t),3)),this.mesh=new l(h,c),this.mesh.onBeforeRender=()=>{c.uniforms.uTime.value+=.01,c.uniforms.uTime.value>=1&&(this.dispose(e),(new u).init(e,t,c.uniforms.uColor.value))},e.add(this.mesh)}dispose(e){var n;null==(n=this.mesh)||n.clear(),e.remove(this.mesh)}}const p=new class extends t{constructor(){super()}load(){this.init("#webgl"),this.animate(),this.create(),setInterval((()=>{this.create()}),1e3)}create(){(new f).init(this.scene)}animate(){var e,n;null==(e=this.stats)||e.begin(),requestAnimationFrame((()=>{this.animate()})),this.renderer.render(this.scene,this.camera),null==(n=this.stats)||n.end()}};return h((()=>{p.load()})),c((()=>{p.gui.close(),p.gui.destroy()})),(e,n)=>(P(),d(w,null,[n[0]||(n[0]=v("div",{id:"webgl"},null,-1)),n[1]||(n[1]=v("div",{class:"title-name"},"烟花",-1))],64))}});export{f as default};

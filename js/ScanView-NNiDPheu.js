var n=Object.defineProperty,e=(e,i,t)=>((e,i,t)=>i in e?n(e,i,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[i]=t)(e,"symbol"!=typeof i?i+"":i,t);import{B as i}from"./base-HDikCi6F.js";import{aK as t,U as a,T as o,B as s,S as r,I as v,O as c,a as l,b3 as m,a5 as d}from"./three-BHpSmIVb.js";import{d as u,g as h,j as x,k as f,l as p,F as w,o as M}from"./@vue-H0c_gk4m.js";const g=u({__name:"ScanView",setup(n){const u=new class extends i{constructor(){super(),e(this,"orthographicCamera"),e(this,"controls2"),e(this,"instancedMesh")}load(){var n;this.init("#webgl"),null==(n=this.renderer)||n.setClearColor(16777215);const e=window.innerWidth/window.innerHeight;this.orthographicCamera=new t(-10*e/2,10*e/2,5,-5,-1e4,1e4),this.orthographicCamera.position.set(0,12,16),this.controls2=new a(this.orthographicCamera,this.renderer.domElement),this.animate(),this.addObject()}addObject(){const n=new o,e=n.load("./texture/light-sphere.jpg"),i=n.load("./texture/transition/transition3.png"),t=100,a=new s(1,10,1),d=new r({uniforms:{uMatTexture:{value:e},uScanTexture:{value:i},uTime:{value:0}},vertexShader:"\n        attribute float aRandom;\n        uniform float uTime;\n        varying vec2 vUv;\n        varying vec3 vPosition;\n        varying vec3 vViewPosition;\n        varying vec3 vNormal;\n       \n        void main(){\n          vUv = uv;\n\n          float offset = aRandom * sin(uTime + 15.0 * aRandom);\n          offset *= 0.5;\n          vec4 mvPosition = modelMatrix * instanceMatrix * vec4(position, 1.0);\n          \n          mvPosition.y += offset;\n\n          mvPosition = viewMatrix * mvPosition;\n          vViewPosition = -mvPosition.xyz;\n          \n\n          vNormal = normalMatrix * mat3(instanceMatrix) * normal;\n\n          vec4 worldPosition = modelMatrix * instanceMatrix * vec4(position, 1.0);\n          vViewPosition.y += offset;\n          vViewPosition = worldPosition.xyz;\n          \n          gl_Position = projectionMatrix * mvPosition;\n        }\n      ",fragmentShader:"\n        uniform sampler2D uMatTexture;\n        uniform sampler2D uScanTexture;\n        uniform float uTime;\n        varying vec2 vUv;\n        varying vec3 vPosition;\n        varying vec3 vViewPosition;\n        varying vec3 vNormal;\n        void main(){\n\n          vec3 normal = normalize( vNormal );\n          vec3 viewDir = normalize( vViewPosition );\n          vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n          vec3 y = cross( viewDir, x );\n          vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5; // 0.495 to remove artifacts caused by undersized matcap disks\n\n          vec4 matcapColor = texture2D( uMatTexture, uv );\n\n         \n\n          vec2 scanUV = fract(vViewPosition.xz);\n          if(vNormal.y < 0.0){\n            scanUV = fract(vUv * 10.0);\n          }\n          vec4 scanColor = texture2D(uScanTexture, scanUV);\n\n          vec3 origin = vec3(0.0);\n          float dist = distance(vViewPosition, origin);\n\n          float radialMove = fract(dist - uTime);\n          radialMove *= 1.0 - smoothstep(1.0, 50.0, dist);\n          radialMove *= 1.0 - step(uTime, dist);\n\n          float scanMix = smoothstep(0.5, 0.0, 1.0 - radialMove);\n          scanMix *= 1.0 + scanColor.r * 0.7;\n\n          scanMix += smoothstep(0.05, 0.0, 1.0 - radialMove);\n\n          vec3 finalColor = mix(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.5, 1.0), scanMix * 0.1);\n\n  \n          gl_FragColor = matcapColor;\n          gl_FragColor.rgb = mix(normal, finalColor, scanMix );\n        }\n      "});this.instancedMesh=new v(a,d,1e4);const u=new Float32Array(1e4);let h=0;const x=new c;for(let o=0;o<t;o++)for(let n=0;n<t;n++){u[h]=2*Math.random();const e=new l(o-50,-5,n-50);x.position.copy(e),x.updateMatrix(),this.instancedMesh.setMatrixAt(h++,x.matrix)}this.instancedMesh.instanceMatrix.needsUpdate=!0,this.instancedMesh.geometry.setAttribute("aRandom",new m(u,1)),this.scene.add(this.instancedMesh)}animate(){var n,e;null==(n=this.stats)||n.begin(),this.timer=requestAnimationFrame((()=>{this.animate()})),d.update(),this.renderer.render(this.scene,this.orthographicCamera),this.instancedMesh&&(this.instancedMesh.material.uniforms.uTime.value+=.01),null==(e=this.stats)||e.end()}};return h((()=>{u.load()})),x((()=>{u.destroy()})),(n,e)=>(M(),f(w,null,[e[0]||(e[0]=p("div",{id:"webgl"},null,-1)),e[1]||(e[1]=p("div",{class:"title-name"},"scan",-1))],64))}});export{g as default};

import{B as e}from"./base-EaBVrMG2.js";import{T as n,C as a,P as r,S as o,q as i,I as t,M as s}from"./three-BSKMsEwc.js";import{d as l,A as g,B as d,g as m,j as v,F as u,o as c}from"./@vue-Di8-S161.js";const h=l({__name:"DissolveView",setup(l){const h=new class extends e{constructor(){super()}load(){this.init("#webgl"),this.animate(),this.create(),this.light()}create(){var e;const l=new n,g={uTime:{value:.5},orginalMap:{value:l.load("./texture/xingkong.jpg")},noiseMap:{value:l.load("./texture/noise.jpg")},edgeColor:{value:new a(16711680)}},d=new r(100,100),m=new o({vertexShader:"\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    ",fragmentShader:"\n      varying vec2 vUv;\n      uniform sampler2D orginalMap;\n      uniform sampler2D noiseMap;\n      uniform float uTime;\n      uniform vec3 edgeColor;\n      void main() {\n        vec3 orginalColor = texture2D(orginalMap, vUv).rgb;\n        float noiseVal = texture2D(noiseMap, vUv).g;\n        float edgeWidth = mix(0.0, 0.2, uTime);\n        float edge =  smoothstep(noiseVal - edgeWidth, noiseVal, uTime);\n        orginalColor += edgeColor.rgb * (1.0 - edge);\n        gl_FragColor = vec4(orginalColor,edge);\n\n      }\n    ",uniforms:g,transparent:!0}),v=new i,u=new t;u.setDecoderPath("./draco/"),v.setDRACOLoader(u),v.load("./models/gltf/readyplayer.me.glb",(e=>{var n;const a=e.scene;a.scale.set(70,70,70),a.position.set(0,-50,20),null==(n=this.scene)||n.add(a),a.traverse((e=>{e instanceof s&&(e.material.transparent=!0,e.material.onBeforeCompile=e=>{Object.assign(e.uniforms,g),e.vertexShader=`\n            varying vec2 vUv;\n            ${e.vertexShader}\n            `,e.vertexShader=e.vertexShader.replace("#include <fog_vertex>","\n              #include <fog_vertex>\n              vUv = uv;\n              "),e.fragmentShader=`\n            varying vec2 vUv;\n            uniform sampler2D orginalMap;\n            uniform sampler2D noiseMap;\n            uniform float uTime;\n            uniform vec3 edgeColor;\n            ${e.fragmentShader}\n            `,e.fragmentShader=e.fragmentShader.replace("#include <dithering_fragment>","\n              #include <dithering_fragment>\n              \n              vec3 orginalColor = outgoingLight * 5.0;\n              float noiseVal = texture2D(noiseMap, vUv).g;\n              float edgeWidth = mix(0.0, 0.2, uTime);\n              float edge =  smoothstep(noiseVal - edgeWidth, noiseVal, uTime);\n              orginalColor += edgeColor.rgb * (1.0 - edge);\n              gl_FragColor = vec4(orginalColor,edge);\n              ")})}))}));this.gui.add({uTime:.5},"uTime",0,1).name("溶解").step(.01).onChange((e=>{g.uTime.value=e})),null==(e=this.scene)||e.add(new s(d,m))}animate(){var e,n;null==(e=this.stats)||e.begin(),requestAnimationFrame((()=>{this.animate()})),this.renderer.render(this.scene,this.camera),null==(n=this.stats)||n.end()}};return g((()=>{h.load()})),d((()=>{h.gui.close(),h.gui.destroy()})),(e,n)=>(c(),m(u,null,[n[0]||(n[0]=v("div",{id:"webgl"},null,-1)),n[1]||(n[1]=v("div",{class:"title-name"},"溶解",-1))],64))}});export{h as default};

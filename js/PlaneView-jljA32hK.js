var e=Object.defineProperty,n=(n,t,o)=>((n,t,o)=>t in n?e(n,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):n[t]=o)(n,"symbol"!=typeof t?t+"":t,o);import{B as t}from"./base-D8exnqXt.js";import{a as o,P as c,b as a,V as i,a5 as r,S as v,D as s}from"./three-aFiGC2Cx.js";import{d as g,z as l,A as d,g as f,j as x,F as m,o as y}from"./@vue-DISYwsDo.js";const z=g({__name:"PlaneView",setup(e){const g=new class extends t{constructor(){super(new o(0,0,0)),n(this,"materials",[]),n(this,"time",0),n(this,"target",new i(0,0))}load(){var e,n,t;this.init("#webgl"),this.renderer.setClearColor(0),null==(e=this.scene)||e.remove(this.axesHelper),this.controls.dispose(),null==(n=this.camera)||n.lookAt(new o(0,0,-100)),this.animate(),null==(t=this.camera)||t.setViewOffset(window.screen.width,window.screen.height,window.screenLeft,window.screenTop,window.innerWidth,window.innerHeight),this.addObject()}addObject(){var e;const n=new c(1,1,1,1);for(let t=0;t<120;t++){const o=new v({wireframe:!1,side:s,transparent:!0,depthTest:!1,uniforms:{uTime:{value:0},uLevel:{value:t/30}},vertexShader:"\n          varying vec2 vUv;\n          varying vec3 vWorldPosition;\n          void main() {\n            vUv = uv;\n            vWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          }\n        ",fragmentShader:"\n          float PI = 3.14159265359;\n\n          uniform float uTime;\n          uniform float uLevel;\n          varying vec2 vUv;\n          varying vec3 vWorldPosition;\n\n          vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n          vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n          vec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\n          float cnoise(vec3 P){\n            vec3 Pi0 = floor(P); // Integer part for indexing\n            vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n            Pi0 = mod(Pi0, 289.0);\n            Pi1 = mod(Pi1, 289.0);\n            vec3 Pf0 = fract(P); // Fractional part for interpolation\n            vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n            vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n            vec4 iy = vec4(Pi0.yy, Pi1.yy);\n            vec4 iz0 = Pi0.zzzz;\n            vec4 iz1 = Pi1.zzzz;\n\n            vec4 ixy = permute(permute(ix) + iy);\n            vec4 ixy0 = permute(ixy + iz0);\n            vec4 ixy1 = permute(ixy + iz1);\n\n            vec4 gx0 = ixy0 / 7.0;\n            vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n            gx0 = fract(gx0);\n            vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n            vec4 sz0 = step(gz0, vec4(0.0));\n            gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n            gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n            vec4 gx1 = ixy1 / 7.0;\n            vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n            gx1 = fract(gx1);\n            vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n            vec4 sz1 = step(gz1, vec4(0.0));\n            gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n            gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n            vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n            vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n            vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n            vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n            vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n            vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n            vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n            vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n            vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n            g000 *= norm0.x;\n            g010 *= norm0.y;\n            g100 *= norm0.z;\n            g110 *= norm0.w;\n            vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n            g001 *= norm1.x;\n            g011 *= norm1.y;\n            g101 *= norm1.z;\n            g111 *= norm1.w;\n\n            float n000 = dot(g000, Pf0);\n            float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n            float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n            float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n            float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n            float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n            float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n            float n111 = dot(g111, Pf1);\n\n            vec3 fade_xyz = fade(Pf0);\n            vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n            vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n            float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n            return 2.2 * n_xyz;\n          }\n\n          float sdCircle(vec2 p, float r) {\n            return length(p) - r;\n          }\n\n          float sdBox(vec2 p, vec2 b) {\n            vec2 d = abs(p) - b;\n            return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n          }\n\n          float sdRoundBox(vec2 p, vec2 b, float r) {\n            vec2 d = abs(p) - b;\n            return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - r;\n          }\n\n          vec3 pallete(float t, vec3 a, vec3 b, vec3 c, vec3 d){\n            return a + b*cos(6.28318*(c*t+d));\n          }\n\n          vec3 a = vec3(0.5, 0.5, 0.5);\n          vec3 b = vec3(0.5, 0.5, 0.5);\n          vec3 c = vec3(1.0, 1.0, 1.0);\n          vec3 d = vec3(0.0, 0.1, 0.2);\n\n          vec2 rotate(vec2 v,float a){\n            float s = sin(a);\n            float c = cos(a);\n            mat2 m = mat2(c, s, -s, c);\n            return m*v;\n          }\n\n          void main() {\n\n            vec2 uv = rotate(vUv - vec2(0.5), uLevel * PI * 5.0);\n\n            float n = cnoise(vec3(uv * 10.0,  uTime * 10.0));\n\n            float scene = mix(\n              sdCircle(uv, 0.2),\n              sdBox(uv, vec2(0.2)),\n              1.1 * (sin(uLevel * PI * 2.0) + 1.0)  + n * 0.5\n            );\n\n            float dd = scene;\n\n            // coloring\n            // vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n            // col *= 1.0 - exp(-6.0*abs(d));\n            // col *= 0.8 + 0.2*cos(150.0*d);\n            // col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n            vec3 col = vec3(1.0);\n            col *= 1.0 - exp(-6.0 * abs(dd * 6.0));\n\n            vec3 color = pallete(fract(uLevel) * 2.0, a, b, c, d);\n\n            if(scene < 0.0){\n              discard;\n            }\n\n            float dist = length(cameraPosition - vWorldPosition);\n            float fade = smoothstep(10.0, 0.5, dist);\n\n            // gl_FragColor = vec4(vUv, sin(uTime), 1.0);\n            // gl_FragColor = vec4(vec3(scene), 0.3);\n            // gl_FragColor = vec4(vec3(col), 0.3);\n            gl_FragColor = vec4(color, 1.0);\n            // gl_FragColor = vec4(vec3(fade), 1.0);\n\n            gl_FragColor.rgb *= fade;\n          }\n        "});this.materials.push(o);const c=new a(n,this.materials[t]);c.position.z=.2*-t,null==(e=this.scene)||e.add(c)}}animate(){var e,n,t;null==(e=this.stats)||e.begin(),requestAnimationFrame((()=>{this.animate()})),r.update(),this.renderer.render(this.scene,this.camera),this.time+=.01;const o=Date.now()/1e3;this.camera.position.z=-o%6,this.materials.forEach((e=>{e.uniforms.uTime.value=o})),this.target.lerp(new i(window.screenLeft,window.screenTop),.1),null==(n=this.camera)||n.setViewOffset(window.screen.width,window.screen.height,this.target.x,this.target.y,window.innerWidth,window.innerHeight),null==(t=this.stats)||t.end()}};return l((()=>{g.load()})),d((()=>{g.destroy()})),(e,n)=>(y(),f(m,null,[n[0]||(n[0]=x("div",{id:"webgl"},null,-1)),n[1]||(n[1]=x("div",{class:"title-name"},"plane",-1))],64))}});export{z as default};

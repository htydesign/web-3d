import{B as e}from"./base-HDikCi6F.js";import{d as n,g as a,j as r,k as o,l as i,F as t,o as s}from"./@vue-H0c_gk4m.js";import{T as l,C as g,P as d,S as m,o as v,K as u,b as c}from"./three-BHpSmIVb.js";const h=n({__name:"DissolveView",setup(n){const h=new class extends e{constructor(){super()}load(){this.init("#webgl"),this.animate(),this.create(),this.light()}create(){var e;const n=new l,a={uTime:{value:.5},orginalMap:{value:n.load("./texture/xingkong.jpg")},noiseMap:{value:n.load("./texture/noise.jpg")},edgeColor:{value:new g(16711680)}},r=new d(100,100),o=new m({vertexShader:"\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    ",fragmentShader:"\n      varying vec2 vUv;\n      uniform sampler2D orginalMap;\n      uniform sampler2D noiseMap;\n      uniform float uTime;\n      uniform vec3 edgeColor;\n      void main() {\n        vec3 orginalColor = texture2D(orginalMap, vUv).rgb;\n        float noiseVal = texture2D(noiseMap, vUv).g;\n        float edgeWidth = mix(0.0, 0.2, uTime);\n        float edge =  smoothstep(noiseVal - edgeWidth, noiseVal, uTime);\n        orginalColor += edgeColor.rgb * (1.0 - edge);\n        gl_FragColor = vec4(orginalColor,edge);\n\n      }\n    ",uniforms:a,transparent:!0}),i=new v,t=new u;t.setDecoderPath("./draco/"),i.setDRACOLoader(t),i.load("./models/gltf/readyplayer.me.glb",(e=>{var n;const r=e.scene;r.scale.set(70,70,70),r.position.set(0,-50,20),null==(n=this.scene)||n.add(r),r.traverse((e=>{e instanceof c&&(e.material.transparent=!0,e.material.onBeforeCompile=e=>{Object.assign(e.uniforms,a),e.vertexShader=`\n            varying vec2 vUv;\n            ${e.vertexShader}\n            `,e.vertexShader=e.vertexShader.replace("#include <fog_vertex>","\n              #include <fog_vertex>\n              vUv = uv;\n              "),e.fragmentShader=`\n            varying vec2 vUv;\n            uniform sampler2D orginalMap;\n            uniform sampler2D noiseMap;\n            uniform float uTime;\n            uniform vec3 edgeColor;\n            ${e.fragmentShader}\n            `,e.fragmentShader=e.fragmentShader.replace("#include <dithering_fragment>","\n              #include <dithering_fragment>\n              \n              vec3 orginalColor = outgoingLight * 5.0;\n              float noiseVal = texture2D(noiseMap, vUv).g;\n              float edgeWidth = mix(0.0, 0.2, uTime);\n              float edge =  smoothstep(noiseVal - edgeWidth, noiseVal, uTime);\n              orginalColor += edgeColor.rgb * (1.0 - edge);\n              gl_FragColor = vec4(orginalColor,edge);\n              ")})}))}));this.gui.add({uTime:.5},"uTime",0,1).name("溶解").step(.01).onChange((e=>{a.uTime.value=e})),null==(e=this.scene)||e.add(new c(r,o))}animate(){var e,n;null==(e=this.stats)||e.begin(),this.timer=requestAnimationFrame((()=>{this.animate()})),this.renderer.render(this.scene,this.camera),null==(n=this.stats)||n.end()}};return a((()=>{h.load()})),r((()=>{h.destroy()})),(e,n)=>(s(),o(t,null,[n[0]||(n[0]=i("div",{id:"webgl"},null,-1)),n[1]||(n[1]=i("div",{class:"title-name"},"溶解",-1))],64))}});export{h as default};

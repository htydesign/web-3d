var n=Object.defineProperty,e=(e,o,a)=>((e,o,a)=>o in e?n(e,o,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[o]=a)(e,"symbol"!=typeof o?o+"":o,a);import{B as o}from"./base-Blzby6IQ.js";import{d as a,z as r,A as t,g as i,o as s}from"./@vue-DISYwsDo.js";import{V as l,C as v,T as c,b as u,n as d,S as m,M as p,a as f,A as h,G as g,aD as w,P as C,D as y,a2 as b}from"./three-CQ-nF5qD.js";const U={id:"webgl"},T=a({__name:"EarthView",setup(n){const a=new class extends o{constructor(){super(),e(this,"uniforms",{uTime:{value:0},uSpeed:{value:0},uFade:{value:new l(0,1)},uStartColor:{value:new v(16777215)}})}load(){this.init("#webgl"),this.animate(),this.create()}create(){var n,e;const o=new v(16777215*Math.random()),a=(new c).load("./texture/earth_specular_2048.jpg"),r=new u(new d(50,128,128),new m({uniforms:{uMap:{value:a},uColor:{value:o}},transparent:!0,wireframe:!0,vertexShader:"\n          varying vec2 vUv;\n          void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          }\n        ",fragmentShader:"\n            uniform sampler2D uMap;\n            uniform vec3 uColor;\n            varying vec2 vUv;\n            void main(){\n                vec3 color = texture2D(uMap, vUv).rgb;\n                if(color.r >= 0.59 && color.g >= 0.59 && color.b >= 0.59){\n                    discard;\n                }else {\n                    color = vec3(uColor);\n                }\n                gl_FragColor = vec4(color, 1.0);\n            }\n        "}));null==(n=this.scene)||n.add(r);const t=new u(new d(49,64,64),new p({color:0}));null==(e=this.scene)||e.add(t);const{position:i}=r.geometry.attributes;for(let s=0;s<20;s++){const n=Math.floor(i.count*Math.random()),e=new f(i.array[n],i.array[n+1],i.array[n+2]);this.createLightCube(e,o)}new u(new d(60,64,64),new m({blending:h,uniforms:{uColor:{value:o}},transparent:!0,fragmentShader:"\n            uniform vec3 uColor;\n            void main(){\n                gl_FragColor = vec4(1.0,1.0,1.0, 0.01);\n            }\n        "}))}createLightCube(n,e){var o;const a=new g;a.lookAt(new f(0,0,0)),a.position.copy(n);const r=(new f).subVectors(new f(0,0,0),n);r.normalize();const t=new b;t.setFromUnitVectors(new f(0,-1,0),r),a.quaternion.multiply(t);const i=new w(.6,15,20),s=new m({transparent:!0,uniforms:{uColor:{value:e}},vertexShader:"\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n      ",fragmentShader:"\n        uniform vec3 uColor;\n        varying vec2 vUv;\n        void main(){\n            vec3 color1 = vec3(1.0);\n            vec3 color2 = mix(color1, uColor, vUv.y);\n            float alpha = smoothstep(1.0, 0.1, vUv.y);\n            gl_FragColor = vec4(color2, alpha);\n        }\n      "}),l=new u(i,s);l.position.set(0,7.5,0),a.add(l);const v=new C(6,6),c=new m({transparent:!0,side:y,depthTest:!0,uniforms:{uTime:{value:.5},uColor:{value:e}},vertexShader:"\n        varying vec2 vUv;\n        void main(){\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      ",fragmentShader:"\n        uniform float uTime;\n        uniform vec3 uColor;\n        varying vec2 vUv;\n        void main(){\n           \n            float dis = distance(vUv, vec2(0.5));\n\n            float dist = fract((length(vUv - vec2(0.5)) /0.5 - uTime * 1.0) * 2.0);\n            float radius = 0.10 + dis;\n            vec3 color = vec3(step(radius, dist));\n\n            float alpha = 1.0;\n            if(color.r == 1.0){\n              alpha = 0.0;    \n              discard;          \n            }\n            color += vec3(1.0);\n\n\n            vec4 vColor = vec4(color, alpha);\n\n            float len = distance(vUv, vec2(0.5));\n            float strength = smoothstep(0.5, 0.35, len);\n            vColor.a *= strength;\n            \n            if(len>0.5){\n              discard;\n            }\n\n\n            gl_FragColor = vColor;\n         \n\n\n            // float dis = distance(vUv,vec2(0.5,0.5));\n            // float opacity = smoothstep(0.4 * uTime, 0.5 * uTime, dis);\n            // // opacity *= step(dis, 0.5 * uTime);\n            // //渐变消失\n            // opacity -= (uTime - 0.8) * 5.0 * step(0.8, uTime);\n            // vec3 disColor = vec3(1.0);\n            // vec3 color = disColor * uTime;\n            // gl_FragColor = vec4(color,opacity);\n        }\n      "}),d=new u(v,c);d.rotateX(-Math.PI/2),d.position.set(0,.5,0),a.add(d),d.onBeforeRender=()=>{c.uniforms.uTime.value>=1&&(c.uniforms.uTime.value=0),c.uniforms.uTime.value+=.005},null==(o=this.scene)||o.add(a)}animate(){var n,e;null==(n=this.stats)||n.begin(),requestAnimationFrame((()=>{this.animate()})),this.renderer.render(this.scene,this.camera),null==(e=this.stats)||e.end()}};return r((()=>{a.load()})),t((()=>{a.destroy()})),(n,e)=>(s(),i("div",U))}});export{T as default};

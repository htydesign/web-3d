var e=Object.defineProperty,i=(i,t,s)=>((i,t,s)=>t in i?e(i,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):i[t]=s)(i,"symbol"!=typeof t?t+"":t,s);import{at as t,aA as s,au as n,aB as a,aC as r,aD as h,ax as o,az as d,aE as c,ag as w,a8 as l,ay as p,aF as g,aG as y,aH as m,aI as H,h as u,aJ as W,aK as x,P as z,a as L,D as P,M as b}from"./three-U1z093Ie.js";class f{init(e,i,c){const w={type:"PointLight",x:0,y:0,z:0,color:16777215,intensity:1e4,distance:0,decay:2,shadowWidth:1024,shadowHeight:1024,shadowNear:.5,shadowFar:1e3,lightHelper:!1,...c};let l;switch(w.type){case"PointLight":l=new t(w.color,w.intensity,w.distance,w.decay),w.lightHelper&&e.add(new s(l,10));case"AmbientLight":l=new d(w.color,w.intensity);case"SpotLight":l=new o(w.color,w.intensity);case"RectAreaLight":l=new h(w.color,w.intensity);case"HemisphereLight":l=new r(w.color,w.color,w.intensity);case"DirectionalLight":l=new n(w.color,w.intensity),w.lightHelper&&e.add(new a(l,5));default:if(l=new t(w.color,w.intensity,w.distance,w.decay),w.lightHelper){const i=new s(l,10);e.add(i)}}l.position.set(w.x,w.y,w.z),l.castShadow=!0,e.add(l),l.shadow.mapSize.width=w.shadowWidth,l.shadow.mapSize.height=w.shadowHeight,l.shadow.camera.near=w.shadowNear,l.shadow.camera.far=w.shadowFar;const p=i.addFolder(w.type);return p.close(),p.add(l,"intensity",0,1e4,1),p.add(l.position,"x",-1e3,1e3,1),p.add(l.position,"y",-1e3,1e3,1),p.add(l.position,"z",-1e3,1e3,1),l}}class S{constructor(e=new u(0,75,100)){i(this,"scene"),i(this,"camera"),i(this,"innerWidth"),i(this,"innerHeight"),i(this,"renderer"),i(this,"controls"),i(this,"clock"),i(this,"stats"),i(this,"gui"),i(this,"axesHelper",new c(150)),this.innerWidth=window.innerWidth,this.innerHeight=window.innerHeight,this.scene=new w,this.camera=new l(75,innerWidth/innerHeight,.1,2e3),this.camera.position.copy(e),this.renderer=new p({antialias:!0}),this.renderer.setSize(this.innerWidth,this.innerHeight),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=g,this.scene.add(this.axesHelper),this.controls=new y(this.camera,this.renderer.domElement),this.clock=new m,this.gui=new H,this.gui.close(),window.onresize=()=>{this.innerWidth=window.innerWidth,this.innerHeight=window.innerHeight,this.camera.aspect=this.innerWidth/this.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(this.innerWidth,this.innerHeight)}}gridHelper(e=1e3,i=10){var t;const s=new W(e,i);null==(t=this.scene)||t.add(s)}onResize(){this.camera.aspect=window.innerWidth/window.innerHeight}light(e={}){return(new f).init(this.scene,this.gui,e)}init(e){const i=document.querySelector(e);null==i||i.appendChild(this.renderer.domElement),this.stats=new x,null==i||i.appendChild(this.stats.dom)}plane(){var e;const i=new z(100,100),t=new L({color:65280,side:P}),s=new b(i,t);s.rotation.x=Math.PI/2,null==(e=this.scene)||e.add(s)}}export{S as B,f as L};

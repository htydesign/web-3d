var o=Object.defineProperty,e=(e,n,r)=>((e,n,r)=>n in e?o(e,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[n]=r)(e,"symbol"!=typeof n?n+"":n,r);import{B as n}from"./base-D8exnqXt.js";import{C as r,P as a,S as s,D as i,b as t,B as l}from"./three-aFiGC2Cx.js";import{d as c,z as d,A as h,g as v,j as u,F as m,o as f}from"./@vue-DISYwsDo.js";const p=c({__name:"LightTwoView",setup(o){const c=new class extends n{constructor(){super(),e(this,"boxList",[]),e(this,"forceColor",new r(1,1,1)),e(this,"shaderLingthRadius",250),e(this,"planMesh"),e(this,"planMat")}load(){this.init("#webgl"),this.animate(),this.create(),this.boxsUpdate((o=>{o.material.uniforms.forceColor={value:this.forceColor}})),this.gridHelper()}create(){var o,e;const n=new a(this.shaderLingthRadius,this.shaderLingthRadius);this.planMat=new s({vertexShader:"\n        varying vec2 vUv;\n        void main() {\n\n            vec3 transformed = position;\n\n            vUv = uv;\n\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(transformed,1.0);\n\n        }\n      ",fragmentShader:"\n      varying vec2 vUv;\n      uniform float scale;\n      uniform vec3 color1;\n      uniform vec3 color2;\n        void main() {\n          float dis = distance(vUv,vec2(0.5,0.5));\n\n          float opacity = smoothstep(0.4 * scale,0.5 * scale,dis);\n\n          opacity *= step(dis,0.5 * scale);\n\n          opacity -= (scale - 0.8) * 5.0 * step(0.8,scale);\n\n          vec3 disColor = color1 - color2;\n\n          vec3 color = color2 + disColor * scale;\n\n          // if(dis>0.5 * scale){\n          //   discard;\n          // }\n          gl_FragColor = vec4(color,opacity);\n        }\n      ",side:i,transparent:!0,wireframe:!1,uniforms:{scale:{value:0},color1:{value:new r(16777215)},color2:{value:new r(65280)}}}),this.planMesh=new t(n,this.planMat),this.planMesh.rotation.x=Math.PI/2,null==(o=this.scene)||o.add(this.planMesh);const c=new s({vertexShader:"\n        varying vec3 vColor;\n        uniform vec3 upColor;\n        uniform vec3 upColor2;\n        uniform vec3 downColor;\n        uniform float time;\n        uniform float speed;\n        uniform float height;\n        uniform vec3 forceColor;\n        uniform float forceColorProgress;\n        uniform float decay;\n        void main() {\n\n            vec3 transformed = position;\n\n            vec3 dissUpColor =  upColor2 - upColor;\n            vec3 readUpColor = upColor + dissUpColor * abs(cos(time));\n\n            vec3 disColor = readUpColor - downColor;\n            float percent = (position.y - height/ - 2.0) / height;\n            vColor = percent * disColor + downColor;\n\n            // vColor = forceColor;\n            if(forceColorProgress!=-1.0){\n              vec3 disVColor = forceColor - vColor;\n              float p = forceColorProgress>0.8?(1.0-(forceColorProgress-0.8)*5.0): forceColorProgress*1.25;\n              vColor = vColor + disVColor * p * decay;\n            }\n\n            if(position.y > height / -2.0){\n             transformed.y -= cos(time) * speed ;\n            }\n             transformed.y = max(transformed.y,height / -2.0);\n\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(transformed,1.0);\n\n        }\n      ",fragmentShader:"\n      varying vec3 vColor;\n        void main() {\n          gl_FragColor = vec4(vColor,1.0);\n        }\n      ",uniforms:{upColor:{value:new r(16711680)},upColor2:{value:new r(65280)},downColor:{value:new r(0)},time:{value:0},speed:{value:1},height:{value:0},forceColor:{value:new r(16711680)},forceColorProgress:{value:0},decay:{value:0}}}),d=new l(1,1,1);for(let r=0;r<500;r++){const o=5*Math.random(),n=c.clone(),r=new t(d,n);r.scale.set(5*Math.random(),o,5*Math.random()),this.boxList.push(r),n.uniforms.upColor.value.g=Math.random(),n.uniforms.speed.value=10*(.5-Math.random()),n.uniforms.height.value=1,r.position.set(200*Math.random()-100,r.scale.y/2,200*Math.random()-100),null==(e=this.scene)||e.add(r)}}boxsUpdate(o=o=>{}){this.boxList.forEach((e=>{e.material.uniforms.time.value+=.005,o(e)}))}animate(){var o,e;if(null==(o=this.stats)||o.begin(),requestAnimationFrame((()=>{this.animate()})),this.planMat){this.planMat.uniforms.scale.value+=.005,this.planMat.uniforms.scale.value%=1;const o=this.planMat.uniforms.scale.value,e=o*this.shaderLingthRadius/2,n=(o-.1)*this.shaderLingthRadius/2,r=o>.8?1-5*(o-.8):1;this.boxsUpdate((o=>{const a=o.position.distanceTo(this.planMesh.position);if(o.material.uniforms.decay={value:r},a>n&&a<e){const r=(e-a)/(e-n);o.material.uniforms.forceColorProgress={value:r}}else o.material.uniforms.forceColorProgress={value:-1}}))}this.renderer.render(this.scene,this.camera),null==(e=this.stats)||e.end()}};return d((()=>{c.load()})),h((()=>{c.destroy()})),(o,e)=>(f(),v(m,null,[e[0]||(e[0]=u("div",{id:"webgl"},null,-1)),e[1]||(e[1]=u("div",{class:"title-name"},"扫光",-1))],64))}});export{p as default};

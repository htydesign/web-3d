var e=Object.defineProperty,n=(n,t,a)=>((n,t,a)=>t in n?e(n,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):n[t]=a)(n,"symbol"!=typeof t?t+"":t,a);import{B as t}from"./base-DRfanOAB.js";import{n as a,o as s,ai as r,C as o,K as i,V as l,x as c,b as h,M as u,aL as d,B as m,l as v,r as g,u as f,P as p}from"./three-nzgV1uvU.js";import{d as w,z as P,A as y,g as b,j as M,F as C,o as x}from"./@vue-B4sUqkWa.js";const S=w({__name:"SpaceTravelView",setup(e){const w=new class extends t{constructor(){super(),n(this,"positions",[]),n(this,"particles"),n(this,"particlesMesh")}load(){this.init("#webgl"),this.animate(),this.scene.background=new o(3355443),this.renderer.localClippingEnabled=!0,this.light({type:"AmbientLight",x:0,y:200,z:100}),this.loadModel()}loadModel(){const e=new i(new l(0,1,0),0),n=new i(new l(0,1,0),0),t=new i(new l(0,-1,0),0),d=new c(100,50),m=new h(d,new u({color:16777215}));var v;m.rotateX(-Math.PI/2),(v="./models/gltf/Michelle.glb",new Promise((e=>{const n=new a,t=new s;t.setDecoderPath("./draco/"),n.setDRACOLoader(t),n.load(v,(n=>{e(n)}))}))).then((a=>{var s;const r=a.scene;r.scale.set(50,50,50),null==(s=this.scene)||s.add(r);const i={uPosY:{value:0},uColor:{value:new o(16776960)}};r.traverse((a=>{if(a instanceof h){a.material.clippingPlanes=[e];const{max:s,min:o}=a.geometry.boundingBox,l=s.y-o.y;r.scale.y;this.gui.add(i.uPosY,"value",0,l,.01).name("剪切高度").onChange((s=>{i.uPosY.value=s,e.constant=-s*r.scale.y,t.constant=s*r.scale.y,m.position.y=s*r.scale.y,n.constant=-s,this.createParticles(a.geometry.attributes.position.array,s,a.geometry.index.array,n,r.scale.y,i.uColor.value)})),this.gui.addColor(i.uColor,"value").name("剪切颜色").onChange((e=>{i.uColor.value=e})),a.material.onBeforeCompile=e=>{Object.assign(e.uniforms,i),e.vertexShader=`\n            varying vec2 vUv;\n            varying float vPostionY;\n            ${e.vertexShader}\n            `,e.vertexShader=e.vertexShader.replace("#include <fog_vertex>","\n            #include <fog_vertex>\n                vUv = uv;\n                vPostionY = position.y;\n            "),e.fragmentShader=`\n            uniform float uPosY;\n            uniform vec3 uColor;\n            varying vec2 vUv;\n            varying float vPostionY;\n\n\n            ${e.fragmentShader}\n            `,e.fragmentShader=e.fragmentShader.replace("#include <dithering_fragment>","#include <dithering_fragment>\n                \n\n                if(vPostionY > uPosY && vPostionY <= uPosY + 0.1){\n                    gl_FragColor.rgb = mix(uColor, gl_FragColor.rgb, smoothstep(0.0,0.5,(vPostionY- uPosY) / 0.1));\n                }\n                \n              ")}}}))})),function(e){return new Promise((n=>{(new r).load(e,(e=>{n(e)}))}))}("./models/obj/male02/male02.obj").then((e=>{var n;const a=e;a.scale.set(.45,.45,.45),null==(n=this.scene)||n.add(a),a.traverse((e=>{e instanceof h&&(e.material.clippingPlanes=[t])}))}))}createParticles(e,n,t,a,s,r=new o(16776960)){var i,c;this.particlesMesh&&(null==(i=this.scene)||i.remove(this.particlesMesh));const h=e,u=[];for(let o=0;o<t.length;o+=3){const e=(new l).fromArray(h,3*t[o]),n=(new l).fromArray(h,3*t[o+1]),s=(new l).fromArray(h,3*t[o+2]),r=new d(e,n),i=new d(n,s),c=new d(s,e),m=a.intersectLine(r,new l),v=a.intersectLine(i,new l),g=a.intersectLine(c,new l);m&&u.push(m),v&&u.push(v),g&&u.push(g)}const w=new m,P=new Float32Array(20*u.length*3);w.setAttribute("position",new v(P,3));const y=[];for(let o=0;o<u.length;o++)for(let e=0;e<20;e++){P[3*o*e+0]=u[o].x+.1*Math.random()-.05,P[3*o*e+1]=u[o].y+.05*Math.random()-.025,P[3*o*e+2]=u[o].z+.1*Math.random()-.05;const n=Math.random()*Math.PI*2,t=Math.acos(.2*Math.random()-.1),a=(.9*Math.random()+.1)*Math.PI*1,s=.9*Math.random()+.1;y.push(n,t,a,15*s)}w.setAttribute("aShift",new g(y,4)),w.attributes.aShift.needsUpdate=!0;const b=new f({uniforms:{uTime:{value:0},uColor:{value:r}},transparent:!0,vertexShader:"\n            uniform float uTime;\n            attribute vec4 aShift;\n\n            const float PI = 3.1415925;\n            \n            void main(){\n                vec3 transformed = position;\n                \n                vec4 mvPosition = modelViewMatrix * vec4(transformed, 1.0);\n\n                gl_Position = projectionMatrix * mvPosition;\n                gl_PointSize = 2.0;\n            }\n        ",fragmentShader:"\n            uniform vec3 uColor;\n            void main(){\n                gl_FragColor = vec4(uColor,1.0);\n            }\n        "});this.particlesMesh=new p(w,b),this.particlesMesh.scale.set(s,s,s),this.particlesMesh.onBeforeRender=()=>{b.uniforms.uTime.value+=1},null==(c=this.scene)||c.add(this.particlesMesh)}updateParticles(){}animate(){var e,n;null==(e=this.stats)||e.begin(),requestAnimationFrame((()=>{this.animate()})),this.renderer&&this.renderer.render(this.scene,this.camera),this.particles&&(this.particles.rotation.y+=.001),null==(n=this.stats)||n.end()}};return P((()=>{w.load()})),y((()=>{w.gui.close(),w.gui.destroy()})),(e,n)=>(x(),b(C,null,[n[0]||(n[0]=M("div",{id:"webgl"},null,-1)),n[1]||(n[1]=M("div",{class:"title-name"},"模型切换",-1))],64))}});export{S as default};

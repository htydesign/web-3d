var n=Object.defineProperty,e=(e,i,o)=>((e,i,o)=>i in e?n(e,i,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[i]=o)(e,"symbol"!=typeof i?i+"":i,o);import{B as i}from"./base-DHNtifFD.js";import{m as o,V as t,a as s,P as a,S as r,A as c,b as l}from"./three-BrSCsmw0.js";import{d as v,z as p,A as u,g as m,j as d,F as h,o as f}from"./@vue-DBDSYTU2.js";const g=v({__name:"FlameView",setup(n){const v=new class extends i{constructor(){super(),e(this,"planeMesh")}load(){this.init("#webgl"),this.light(),this.animate(),this.create(),this.gridHelper()}create(){var n,e,i;const v="\n    uniform vec2 iResolution;\n    uniform float iTime;\n    float noise(vec3 p) //Thx to Las^Mercury\n    {\n      vec3 i = floor(p);\n      vec4 a = dot(i, vec3(1., 57., 21.)) + vec4(0., 57., 21., 78.);\n      vec3 f = cos((p-i)*acos(-1.))*(-.5)+.5;\n      a = mix(sin(cos(a)*a),sin(cos(1.+a)*(1.+a)), f.x);\n      a.xy = mix(a.xz, a.yw, f.y);\n      return mix(a.x, a.y, f.z);\n    }\n\n    float sphere(vec3 p, vec4 spr)\n    {\n      return length(spr.xyz-p) - spr.w;\n    }\n\n    float flame(vec3 p)\n    {\n      float d = sphere(p*vec3(1.,.5,1.), vec4(.0,-1.,.0,1.));\n      return d + (noise(p+vec3(.0,iTime*2.,.0)) + noise(p*3.)*.5)*.25*(p.y) ;\n    }\n\n    float scene(vec3 p)\n    {\n      return min(100.-length(p) , abs(flame(p)) );\n    }\n\n    vec4 raymarch(vec3 org, vec3 dir)\n    {\n      float d = 0.0, glow = 0.0, eps = 0.02;\n      vec3  p = org;\n      bool glowed = false;\n      \n      for(int i=0; i<64; i++)\n      {\n        d = scene(p) + eps;\n        p += d * dir;\n        if( d>eps )\n        {\n          if(flame(p) < .0)\n            glowed=true;\n          if(glowed)\n                glow = float(i)/64.;\n        }\n      }\n      return vec4(p,glow);\n    }\n\n    void main()\n    {\n      vec2 v = -1.0 + 2.0 * gl_FragCoord.xy / iResolution.xy;\n      v.x *= iResolution.x/iResolution.y;\n      \n      vec3 org = vec3(0., -2., 4.);\n      vec3 dir = normalize(vec3(v.x*1.6, -v.y, -1.5));\n      \n      vec4 p = raymarch(org, dir);\n      float glow = p.w;\n      \n      vec4 col = mix(vec4(1.,.5,.1,1.), vec4(0.1,.5,1.,1.), p.y*.02+.4);\n      \n      gl_FragColor = mix(vec4(0.), col, pow(glow*2.,4.));\n      // gl_FragColor = mix(vec4(1.), mix(vec4(1.,.5,.1,1.),vec4(0.1,.5,1.,1.),p.y*.02+.4), pow(glow*2.,4.));\n\n    }\n\n    ",p=new o;p.x=this.innerWidth/2,p.y=this.innerHeight/2;let u=!1;document.addEventListener("pointerdown",(n=>{p.z=2,p.w=2,u&&(p.x=n.pageX,p.y=window.innerHeight-n.pageY)}));const{width:m,height:d}=(null==(n=this.renderer)?void 0:n.getSize(new t))||{},h=new s(m,d,null==(e=this.renderer)?void 0:e.getPixelRatio()),f=new a(200,100),g=new r({uniforms:{iTime:{value:0},iResolution:{value:h},iMouse:{value:p}},vertexShader:"\n    void main(){\n      // gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      gl_Position = vec4(position,1.0);\n      \n    }\n    ",fragmentShader:v,blending:c});this.planeMesh=new l(f,g),null==(i=this.scene)||i.add(this.planeMesh);let x=!1;const w={flame:()=>{x=!x,u=!x,g.fragmentShader=x?v:"\n    uniform vec2 iResolution;\n    uniform vec2 iMouse;\n    uniform float iTime;\n\n    vec2 hash( vec2 p ){\n      p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n      return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n    }\n    float noise1( in vec2 p ){\n        // noise function from IQ himself\n        const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n        const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n      vec2  i = floor( p + (p.x+p.y)*K1 );\n        vec2  a = p - i + (i.x+i.y)*K2;\n        float m = step(a.y,a.x); \n        vec2  o = vec2(m,1.0-m);\n        vec2  b = a - o + K2;\n      vec2  c = a - 1.0 + 2.0*K2;\n        vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n      vec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n        return dot( n, vec3(70.0) );\n    }\n    float noise2(in vec2 p){\n        return\n            0.500*noise1(p*1.0)\n          +0.250*noise1(p*2.0)\n          +0.125*noise1(p*4.0)\n          +0.063*noise1(p*8.0)\n        ;\n    }\n    vec2 noise3(in vec2 p){\n        return vec2(noise2(p), noise2(p + 20.0));\n    }\n\n    vec2 noise4(in vec2 p){\n        return noise3(p + noise3(p));\n    }\n\n    vec2 transform(in vec2 p){\n        return p + 0.2 * noise4(1.4 * p - vec2(0.0, iTime * 0.8));\n    }\n\n    vec3 ud(vec2 p) {\n        p.x = abs(p.x);\n        float q = p.x * (p.y * 11.0 + 1.7);\n        p.x = max(p.x, q);\n        return vec3(1.0, 0.1, 0.0) / pow(length(p), 5.0) * 0.000008;\n    }\n\n\n    void main(){\n        vec2 uv = gl_FragCoord.xy/iResolution.xy ;\n        vec2 mouse;\n        if (length(iMouse.xy) < 0.001)\n            mouse = vec2(0.5*iResolution.x/iResolution.y, 0.2);\n        else\n            mouse = iMouse.xy/iResolution.xy;\n        vec2 p = uv - mouse;\n        vec3 col = ud(transform(p * vec2(1.0, 0.5))) * 0.05;    \n        // vec3 col = ud(p * vec2(1.0, 0.5));    \n        gl_FragColor = vec4(col,1.0);\n    }    \n    ",g.needsUpdate=!0}};this.gui.add(w,"flame").name("切换火焰")}animate(){var n,e;null==(n=this.stats)||n.begin(),requestAnimationFrame((()=>{this.animate()})),this.planeMesh&&(this.planeMesh.material.uniforms.iTime.value+=.01),this.renderer.render(this.scene,this.camera),null==(e=this.stats)||e.end()}};return p((()=>{v.load()})),u((()=>{v.gui.close(),v.gui.destroy()})),(n,e)=>(f(),m(h,null,[e[0]||(e[0]=d("div",{id:"webgl"},null,-1)),e[1]||(e[1]=d("div",{class:"title-name"},"火焰",-1))],64))}});export{g as default};

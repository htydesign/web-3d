import{B as e}from"./base-DbQo_w83.js";import{T as n,e as a,B as i,f as r,b as s}from"./three-C8kJxG0b.js";import{d as t,z as o,A as l,g as d,j as c,F as m,o as g}from"./@vue-BDXyav1n.js";const u=t({__name:"LightThreeView",setup(t){const u=new class extends e{constructor(){super()}load(){this.init("#webgl"),this.light(),this.animate(),this.create(),this.gridHelper()}async create(){var e;const t=(new n).load("./texture/noise.jpg");t.wrapS=a,t.wrapT=a;const o=new i(50,50,50);for(let n=0;n<10;n++)for(let a=0;a<10;a++){const i=new r({color:"#e43a3a",roughness:n/10,metalness:a/10,transmission:1,clearcoat:1});i.iridescence=3*n/10*50,i.iridescenceIOR=1.5;const l=new s(o,i);l.position.set(50*n-250,0,50*a-250),null==(e=this.scene)||e.add(l);const d={iTime:{value:0},iDir:{value:50*Math.random()},scanMap:{value:t}};i.onBeforeCompile=e=>{Object.assign(e.uniforms,d),e.vertexShader=`\n              uniform float iTime;\n              uniform float iDir;\n              varying vec2 vUv;\n              ${e.vertexShader}\n              `,e.vertexShader=e.vertexShader.replace("#include <begin_vertex>","              \n              #include <begin_vertex>\n                transformed.y+=sin(iTime/50.0) * iDir;\n                vUv = uv;\n              "),e.fragmentShader=`\n              uniform float iTime;\n              uniform sampler2D scanMap;\n              varying vec2 vUv;\n              ${e.fragmentShader}\n              `,e.fragmentShader=e.fragmentShader.replace("#include <dithering_fragment>","              \n              #include <dithering_fragment>\n                float dis = distance(vWorldPosition.xz,vec2(0.0,0.0));\n\n                dis = fract((dis-iTime) / 50.0) ;\n\n                if(dis<1.0 && dis>0.5){\n                  vec3 mapColor = texture2D(scanMap,vUv).rgb;\n                  float p = ( dis-0.5)/0.5;\n                  gl_FragColor.rgb = mix(gl_FragColor.rgb, mapColor, p);\n                }\n               \n              ")},l.onBeforeRender=()=>{d.iTime.value=50*this.clock.getElapsedTime()}}}animate(){var e,n;null==(e=this.stats)||e.begin(),requestAnimationFrame((()=>{this.animate()})),this.renderer.render(this.scene,this.camera),null==(n=this.stats)||n.end()}};return o((()=>{u.load()})),l((()=>{u.gui.close(),u.gui.destroy()})),(e,n)=>(g(),d(m,null,[n[0]||(n[0]=c("div",{id:"webgl"},null,-1)),n[1]||(n[1]=c("div",{class:"title-name"},"扫光",-1))],64))}});export{u as default};

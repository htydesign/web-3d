import{B as n}from"./base-DD5aOT-d.js";import{c as e,d as a,S as o,D as i,l as t,a as l,C as r,A as s,ad as u}from"./three-DHmVq3iW.js";import{d as m,z as d,A as c,g as v,j as f,F as h,o as p}from"./@vue-BDXyav1n.js";const g=m({__name:"FireWorksView2",setup(m){class g{constructor(n,r){const s=new e,m=450,d=new Float32Array(1350);s.setAttribute("position",new a(d,3));const c=new Float32Array(m);s.setAttribute("aIndex",new a(c,1));let v=0,f=50;for(let e=0;e<m;e++){c[e]=e%90,e%90==0&&v++,1===v?(d[3*e+1]=0,f=50):2===v?(d[3*e+1]=2,f=52):3===v?(d[3*e+1]=4,f=54):4===v?(d[3*e+1]=6,f=52):5===v&&(d[3*e+1]=8,f=50);const n=Math.sin(u.degToRad(e%90*4))*f,a=Math.cos(u.degToRad(e%90*4))*f;d[3*e+0]=n,d[3*e+2]=a}s.attributes.position.needsUpdate=!0,s.attributes.aIndex.needsUpdate=!0;const h=new o({uniforms:{uIndex:{value:3},uFlag:{value:0},uTime:{value:0}},vertexShader:"\n       attribute float aIndex;\n\n       varying float index;\n       varying float index2;\n\n       uniform float uTime;\n\n       float PI = 3.1415925;\n\n        void main(){\n          index = aIndex;         \n          \n          vec3 myPosition = position;\n\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(myPosition, 1.0);\n          gl_PointSize = 5.0;\n          gl_PointSize *= 100.0 / -(modelViewMatrix * vec4(position, 1.0)).z;\n        }\n      ",fragmentShader:"\n        varying float index;\n        uniform float uIndex;\n        uniform float uFlag;\n\n        //i 当前下表 n 一圈点的下表\n        vec4 mColor(in float i, in float n){\n\n          float max = i + 5.0;\n          float min = i - 5.0;\n\n          vec3 color = vec3(1.0, 0.0, 0.0);\n          float alpha = 1.0; \n\n            if(min < 0.0 && (n < max || n > min  + 89.0) ){\n              //如果min<0,则min+89.0, i=2【i-5+89, n, i+5】 【87, n, 8】\n              min += 89.0;\n              if(n > min && n < 89.0){\n                alpha =1.0- (i - n + 89.0) / 5.0;\n              }else if(n < max && n >= i){\n                alpha = 1.0 - (n - i) / 5.0;              \n              }else{\n                alpha =  (n + 89.0 - min ) / 5.0;\n              }\n              return vec4(color, alpha);\n            }else if(max > 89.0 && (n < max - 89.0 || n > min)){\n              //如果max>89,则max-89.0, n=89【n-5, n+5-89】【84, n, 4】\n              max -= 89.0;\n              if(n <= i && n>min){                \n                alpha = (n - min) / (i - min); \n              }else if(n > i ){                \n                alpha =  (89.0 - n + max) / (89.0 - i);              \n              } else{  \n                alpha = 1.0 - (89.0 - i) / 5.0;\n              }     \n             \n              return vec4(color, alpha);\n            }else if(n >= min && n <= max){\n              if(i >= n){\n                alpha = 1.0-(i - n) / 5.0;\n              }else{\n                alpha = 1.0-(n - i) / 5.0;\n              }         \n              return vec4(color, alpha);\n            }else{            \n              float alpha = 1.0 - distance(gl_PointCoord,vec2(0.5)) * 2.0;\n              return vec4(0.1, 0.1, 0.1, alpha);\n            }\n\n            \n            \n        }\n\n        void main(){\n          float alpha = 1.0 - distance(gl_PointCoord,vec2(0.5)) * 2.0;\n          if(uFlag == 1.0){            \n            gl_FragColor = vec4(1.0, 0.0, 0.0, alpha);\n          }else{\n            gl_FragColor = mColor(uIndex,index);            \n          }\n\n        }\n      ",transparent:!0,side:i}),p=new t(s,h);p.position.set(0,70,0);let g=0;let x=0;const P={n:20};r.add(P,"n",1,50,1).name("烟花间隔(毫秒)"),p.onBeforeRender=()=>{if(h.uniforms.uTime.value+=.001,h.uniforms.uIndex.value>90&&(h.uniforms.uIndex.value=0,g++),g>=2){h.uniforms.uFlag.value=1;const e=new l(75*Math.random()-35,72,75*Math.random()-35);x%P.n==0&&(new S(n,e),new w(n,e,150))}else h.uniforms.uIndex.value+=1;x+=1,p.rotateY(.001)},n.add(p)}}class w{constructor(n,i,u){const m=i,d=new l(i.x,0,i.z),c=new e,v=new r(Math.random(),Math.random(),Math.random()),f=new o({uniforms:{uTime:{value:0},uHeight:{value:u/2},uColor:{value:v},uScale:{value:0},uEndScale:{value:1}},vertexShader:"\n        attribute vec3 toPosition;\n        uniform float uTime;\n        uniform float uScale;\n        uniform float uHeight;\n        uniform float uEndScale;\n\n        void main(){\n            vec3 myPosition = position;\n            myPosition.y -= 1.0 * uTime;\n\n            vec4 mvPosition = modelViewMatrix * vec4(myPosition, 1.0);\n\n            gl_PointSize = 100.0 * 50.0 / -mvPosition.z;\n            gl_PointSize *= uScale * uEndScale;\n\n            gl_Position = projectionMatrix * mvPosition;\n\n        }\n      ",fragmentShader:"\n        uniform vec3 uColor;\n        void main(){\n            float alpha = 1.0 - distance(gl_PointCoord,vec2(0.5)) * 2.0;\n            gl_FragColor = vec4(uColor, alpha);\n        }\n      ",transparent:!0,blending:s,depthTest:!1}),h=new Float32Array(m);c.setAttribute("position",new a(h,3)),c.setAttribute("toPosition",new a(new Float32Array(d),3));const p=new t(c,f);let g=0;p.onBeforeRender=()=>{f.uniforms.uScale.value<=2&&(f.uniforms.uScale.value+=.1,0==g&&(g=1,new x(n,m,v,u))),f.uniforms.uTime.value<=u?f.uniforms.uTime.value+=1:(p.clear(),n.remove(p)),f.uniforms.uTime.value>=.8*u&&f.uniforms.uEndScale.value>=0&&(f.uniforms.uEndScale.value-=.05)},n.add(p)}}class x{constructor(n,i,l,r){const s=new e,u=new Float32Array(150);s.setAttribute("position",new a(u,3));const m=new Float32Array(50);s.setAttribute("aDelay",new a(m,1));for(let e=0;e<50;e++)u[3*e+0]=i.x,u[3*e+1]=i.y,u[3*e+2]=i.z,m[e]=100*e;const d=new o({uniforms:{uTime:{value:0},uColor:{value:l},uEndScale:{value:1}},vertexShader:"\n        attribute float aDelay;  \n\n        uniform float uTime;\n        uniform float uEndScale;\n\n        void main() {\n          vec3 pos = position;\n\n          float delayTime = aDelay + uTime;\n\n         if(uTime * 1000.0 > aDelay){\n          pos.y -= (uTime * 1000.0 - aDelay) * 0.01;\n         }\n         \n\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n          gl_PointSize = 6.0 - 4.0 * aDelay/2000.0;\n\n          gl_PointSize *= uEndScale;\n        }\n      ",fragmentShader:"\n        uniform vec3 uColor;\n        void main() {\n          gl_FragColor = vec4(uColor, 1.0);\n        }\n      "}),c=new t(s,d);c.onBeforeRender=()=>{d.uniforms.uTime.value>r/10?(c.clear(),n.remove(c)):(d.uniforms.uTime.value+=.1,d.uniforms.uTime.value>=.08*r&&d.uniforms.uEndScale.value>=0&&(d.uniforms.uEndScale.value-=.5))},n.add(c)}run(){}}class S{constructor(n,i){const l=new e,u=new Float32Array(150);l.setAttribute("position",new a(u,3));const m=new Float32Array(150);l.setAttribute("toPosition",new a(m,3));const d=new Float32Array(50);l.setAttribute("aSpeed",new a(d,1));for(let e=0;e<50;e++)u[3*e+0]=i.x,u[3*e+1]=i.y,u[3*e+2]=i.z,m[3*e+0]=10*Math.random()*Math.sin(e),m[3*e+1]=10*Math.random()-5,m[3*e+2]=10*Math.random()*Math.cos(e),d[e]=Math.random();const c=new o({uniforms:{uTime:{value:0},uColor:{value:new r(Math.random(),Math.random(),Math.random())},uScale:{value:1},uSpeed:{value:.5}},vertexShader:"\n        attribute vec3 toPosition;\n        attribute float aSpeed;\n\n        uniform float uTime;\n        uniform float uScale;\n       \n        void main(){\n            vec3 myPosition = position;\n            myPosition += toPosition * uTime ;\n\n            vec4 mvPosition = modelViewMatrix * vec4(myPosition, 1.0);\n\n            gl_PointSize = 100.0 * 30.0 / -mvPosition.z;\n            gl_PointSize *= uScale;\n            gl_Position = projectionMatrix * mvPosition;\n            \n        }\n      ",fragmentShader:"\n        uniform vec3 uColor;\n        void main(){\n            float alpha = 1.0 - distance(gl_PointCoord,vec2(0.5)) * 2.0;\n            gl_FragColor = vec4(uColor, alpha);\n        }\n      ",transparent:!0,blending:s,depthTest:!1}),v=new t(l,c);v.onBeforeRender=()=>{c.uniforms.uTime.value<1?c.uniforms.uTime.value+=.05:c.uniforms.uScale.value<0?(n.remove(v),v.clear()):c.uniforms.uScale.value-=.02},n.add(v)}}const P=new class extends n{constructor(){super()}load(){var n;this.init("#webgl"),this.animate(),this.create(),null==(n=this.scene)||n.remove(this.axesHelper),new g(this.scene,this.gui)}create(){}animate(){var n,e;null==(n=this.stats)||n.begin(),requestAnimationFrame((()=>{this.animate()})),this.renderer.render(this.scene,this.camera),null==(e=this.stats)||e.end()}};return d((()=>{P.load()})),c((()=>{P.gui.close(),P.gui.destroy()})),(n,e)=>(p(),v(h,null,[e[0]||(e[0]=f("div",{id:"webgl"},null,-1)),e[1]||(e[1]=f("div",{class:"title-name"},"烟花2",-1))],64))}});export{g as default};

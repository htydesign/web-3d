import{B as n}from"./base-DD5aOT-d.js";import{a3 as e,c as t,d as a,S as o,D as i,l as s,a as r,C as l,A as u,G as m,o as c,z as d,F as f,b as v,N as h,aj as p,ad as w}from"./three-DHmVq3iW.js";import{d as g,z as x,A as y,g as P,j as S,F as M,o as T}from"./@vue-BDXyav1n.js";const b=g({__name:"FireWorksView2",setup(g){class b{constructor(n,e){const l=new t,u=450,m=new Float32Array(1350);l.setAttribute("position",new a(m,3));const c=new Float32Array(u);l.setAttribute("aIndex",new a(c,1));let d=0,f=50;for(let t=0;t<u;t++){c[t]=t,t%90==0&&d++,1===d?(m[3*t+1]=0,f=50):2===d?(m[3*t+1]=2,f=52):3===d?(m[3*t+1]=4,f=54):4===d?(m[3*t+1]=6,f=52):5===d&&(m[3*t+1]=8,f=50);const n=Math.sin(w.degToRad(t%90*4))*f,e=Math.cos(w.degToRad(t%90*4))*f;m[3*t+0]=n,m[3*t+2]=e}l.attributes.position.needsUpdate=!0,l.attributes.aIndex.needsUpdate=!0;const v=new o({uniforms:{uIndex:{value:3},uFlag:{value:0},uTime:{value:0}},vertexShader:"\n       attribute float aIndex;\n\n       varying float index;\n       varying float index2;\n\n       uniform float uTime;\n\n       float PI = 3.1415925;\n\n        void main(){\n          index = mod(aIndex, 90.0);         \n          \n          vec3 myPosition = position;\n\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(myPosition, 1.0);\n          gl_PointSize = 5.0;\n          gl_PointSize *= 100.0 / -(modelViewMatrix * vec4(position, 1.0)).z;\n        }\n      ",fragmentShader:"\n        varying float index;\n        uniform float uIndex;\n        uniform float uFlag;\n\n        //i 当前下表 n 一圈点的下表\n        vec4 mColor(in float i, in float n){\n\n          float max = i + 5.0;\n          float min = i - 5.0;\n\n          vec3 color = vec3(1.0, 1.0, 1.0);\n          float alpha = 1.0; \n\n            if(min < 0.0 && (n < max || n > min  + 89.0) ){\n              //如果min<0,则min+89.0, i=2【i-5+89, n, i+5】 【87, n, 8】\n              min += 89.0;\n              if(n > min && n < 89.0){\n                alpha =1.0- (i - n + 89.0) / 5.0;\n              }else if(n < max && n >= i){\n                alpha = 1.0 - (n - i) / 5.0;              \n              }else{\n                alpha =  (n + 89.0 - min ) / 5.0;\n              }\n              return vec4(color, alpha);\n            }else if(max > 89.0 && (n < max - 89.0 || n > min)){\n              //如果max>89,则max-89.0, n=89【n-5, n+5-89】【84, n, 4】\n              max -= 89.0;\n              if(n <= i && n>min){                \n                alpha = (n - min) / (i - min); \n              }else if(n > i ){                \n                alpha =  (89.0 - n + max) / (89.0 - i);              \n              } else{  \n                alpha = 1.0 - (89.0 - i) / 5.0;\n              }     \n             \n              return vec4(color, alpha);\n            }else if(n >= min && n <= max){\n              if(i >= n){\n                alpha = 1.0-(i - n) / 5.0;\n              }else{\n                alpha = 1.0-(n - i) / 5.0;\n              }         \n              return vec4(color, alpha);\n            }else{            \n              float alpha = 1.0 - distance(gl_PointCoord,vec2(0.5)) * 2.0;\n              return vec4(0.1, 0.1, 0.1, alpha);\n            }\n\n            \n            \n        }\n\n        void main(){\n          float alpha = 1.0 - distance(gl_PointCoord,vec2(0.5)) * 2.0;\n          if(uFlag == 1.0){            \n            gl_FragColor = vec4(1.0, 1.0, 1.0, alpha);\n          }else{\n            gl_FragColor = mColor(uIndex,index);            \n          }\n\n        }\n      ",transparent:!0,side:i}),h=new s(l,v);h.position.set(0,70,0);let p=0;let g=0,x=!1;const y={n:10};e.add(y,"n",1,50,1).name("烟花间隔(毫秒)"),h.onBeforeRender=()=>{if(v.uniforms.uTime.value+=.001,v.uniforms.uIndex.value>90&&(v.uniforms.uIndex.value=0,p++),p>=2){v.uniforms.uFlag.value=1,x||(x=!0,new _(n));const e=new r(75*Math.random()-35,72,75*Math.random()-35);g%y.n==0&&(new C(n,e),new z(n,e,150));let t=0,a=1;for(let n=0;n<u;n++){c[n]=n,n%90==0&&t++,a=1,1===t?(m[3*n+1]=0,f=50):2===t?(m[3*n+1]=2,a=-1,f=52):3===t?(m[3*n+1]=4,f=54):4===t?(m[3*n+1]=6,a=-1,f=52):5===t&&(m[3*n+1]=8,f=50);const e=Math.sin(w.degToRad((n+g/100*a)%90*4))*f,o=Math.cos(w.degToRad((n+g/100*a)%90*4))*f;m[3*n+0]=e,m[3*n+2]=o}l.attributes.position.needsUpdate=!0}else v.uniforms.uIndex.value+=1;g+=1},n.add(h)}}class z{constructor(n,e,i){const m=e,c=new r(e.x,0,e.z),d=new t,f=new l(Math.random(),Math.random(),Math.random()),v=new o({uniforms:{uTime:{value:0},uHeight:{value:i/2},uColor:{value:f},uScale:{value:0},uEndScale:{value:1}},vertexShader:"\n        attribute vec3 toPosition;\n        uniform float uTime;\n        uniform float uScale;\n        uniform float uHeight;\n        uniform float uEndScale;\n\n        void main(){\n            vec3 myPosition = position;\n            myPosition.y -= 1.0 * uTime;\n\n            vec4 mvPosition = modelViewMatrix * vec4(myPosition, 1.0);\n\n            gl_PointSize = 100.0 * 50.0 / -mvPosition.z;\n            gl_PointSize *= uScale * uEndScale;\n\n            gl_Position = projectionMatrix * mvPosition;\n\n        }\n      ",fragmentShader:"\n        uniform vec3 uColor;\n        void main(){\n            float alpha = 1.0 - distance(gl_PointCoord,vec2(0.5)) * 2.0;\n            gl_FragColor = vec4(uColor, alpha);\n        }\n      ",transparent:!0,blending:u,depthTest:!1}),h=new Float32Array(m);d.setAttribute("position",new a(h,3)),d.setAttribute("toPosition",new a(new Float32Array(c),3));const p=new s(d,v);let w=0;p.onBeforeRender=()=>{v.uniforms.uScale.value<=2&&(v.uniforms.uScale.value+=.1,0==w&&(w=1,new A(n,m,f,i))),v.uniforms.uTime.value<=i?v.uniforms.uTime.value+=1:(p.clear(),n.remove(p)),v.uniforms.uTime.value>=.8*i&&v.uniforms.uEndScale.value>=0&&(v.uniforms.uEndScale.value-=.05)},n.add(p)}}class A{constructor(n,e,i,r){const l=new t,u=new Float32Array(150);l.setAttribute("position",new a(u,3));const m=new Float32Array(50);l.setAttribute("aDelay",new a(m,1));for(let t=0;t<50;t++)u[3*t+0]=e.x,u[3*t+1]=e.y,u[3*t+2]=e.z,m[t]=100*t;const c=new o({uniforms:{uTime:{value:0},uColor:{value:i},uEndScale:{value:1}},vertexShader:"\n        attribute float aDelay;  \n\n        uniform float uTime;\n        uniform float uEndScale;\n\n        void main() {\n          vec3 pos = position;\n\n          float delayTime = aDelay + uTime;\n\n         if(uTime * 1000.0 > aDelay){\n          pos.y -= (uTime * 1000.0 - aDelay) * 0.01;\n         }\n         \n\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n          gl_PointSize = 6.0 - 4.0 * aDelay/2000.0;\n\n          gl_PointSize *= uEndScale;\n        }\n      ",fragmentShader:"\n        uniform vec3 uColor;\n        void main() {\n          gl_FragColor = vec4(uColor, 1.0);\n        }\n      "}),d=new s(l,c);d.onBeforeRender=()=>{c.uniforms.uTime.value>r/10?(d.clear(),n.remove(d)):(c.uniforms.uTime.value+=.1,c.uniforms.uTime.value>=.08*r&&c.uniforms.uEndScale.value>=0&&(c.uniforms.uEndScale.value-=.5))},n.add(d)}run(){}}class C{constructor(n,e){const i=new t,r=new Float32Array(150);i.setAttribute("position",new a(r,3));const m=new Float32Array(150);i.setAttribute("toPosition",new a(m,3));const c=new Float32Array(50);i.setAttribute("aSpeed",new a(c,1));for(let t=0;t<50;t++)r[3*t+0]=e.x,r[3*t+1]=e.y,r[3*t+2]=e.z,m[3*t+0]=10*Math.random()*Math.sin(t),m[3*t+1]=10*Math.random()-5,m[3*t+2]=10*Math.random()*Math.cos(t),c[t]=Math.random();const d=new o({uniforms:{uTime:{value:0},uColor:{value:new l(Math.random(),Math.random(),Math.random())},uScale:{value:1},uSpeed:{value:.5}},vertexShader:"\n        attribute vec3 toPosition;\n        attribute float aSpeed;\n\n        uniform float uTime;\n        uniform float uScale;\n       \n        void main(){\n            vec3 myPosition = position;\n            myPosition += toPosition * uTime ;\n\n            vec4 mvPosition = modelViewMatrix * vec4(myPosition, 1.0);\n\n            gl_PointSize = 100.0 * 30.0 / -mvPosition.z;\n            gl_PointSize *= uScale;\n            gl_Position = projectionMatrix * mvPosition;\n            \n        }\n      ",fragmentShader:"\n        uniform vec3 uColor;\n        void main(){\n            float alpha = 1.0 - distance(gl_PointCoord,vec2(0.5)) * 2.0;\n            gl_FragColor = vec4(uColor, alpha);\n        }\n      ",transparent:!0,blending:u,depthTest:!1}),f=new s(i,d);f.onBeforeRender=()=>{d.uniforms.uTime.value<1?d.uniforms.uTime.value+=.05:d.uniforms.uScale.value<0?(n.remove(f),f.clear()):d.uniforms.uScale.value-=.02},n.add(f)}}class F{constructor(n,e,o){const i=new t,s=new Float32Array([...e,...e]);i.setAttribute("position",new a(s,3));const r=new p(i,new h({color:16777215,opacity:.5})),l=o.x-e.x,u=o.y-e.y,m=o.z-e.z,c=l/50,d=u/50,f=m/50;r.onBeforeRender=()=>{s[3]==o.x&&s[4]==o.y&&s[5]==o.z||(e.x>=o.x?s[3]>o.x&&(s[3]+=c):s[3]<o.x&&(s[3]+=c),e.y>=o.y?s[4]>o.y&&(s[4]+=d):s[4]<o.y&&(s[4]+=d),e.z>=o.z?s[5]>o.z&&(s[5]+=f):s[5]<=o.z&&(s[5]+=f),i.attributes.position.needsUpdate=!0)},n.add(r)}}class _{constructor(n){const e=[];for(let a=0;a<5;a++){const n=w.degToRad(72*a),t=40*Math.cos(n),o=40*Math.sin(n);e.push(new r(t,o,0))}const t=new m;t.rotateX(Math.PI/2),t.position.set(0,74,0),n.add(t),new F(t,e[0],e[2]),new F(t,e[2],e[4]),new F(t,e[4],e[1]),new F(t,e[1],e[3]),new F(t,e[3],e[0]),new D(t,40),new D(t,45,!1)}}class I{constructor(n){const t=new c,a=new d;a.setDecoderPath("./draco/"),t.setDRACOLoader(a),t.load("./models/gltf/DamagedHelmet/glTF/DamagedHelmet.gltf",(t=>{const a=t.scene;a.scale.set(25,25,25),a.position.set(0,100,0);const o=new f(new r(0,-1,0),75);a.traverse((n=>{n instanceof v&&(n.material.clippingPlanes=[o])})),n.add(a),setTimeout((()=>{new e.Tween(n.rotation).to({x:-Math.PI/6},2e3).start().onComplete((()=>{new e.Tween(a.position).to({x:0,y:0,z:0},5e3).start()}))}),5e3)}))}}class D{constructor(n,e,o=!0){const i=[],s=new t,l=new Float32Array(225);s.setAttribute("position",new a(l,3));for(let t=0;t<=75;t++){const n=t/75*Math.PI*2,a=e*Math.cos(n),o=e*Math.sin(n);i.push(new r(a,o,0))}l[0]=i[0].x,l[1]=i[0].y,l[2]=i[0].z;const u=new h({color:16777215,opacity:.5}),m=new p(s,u);let c=o?0:i.length,d=0;m.onBeforeRender=()=>{o?c<i.length-1?d%1==0&&(l[3*c+0]=i[c+0].x,l[3*c+1]=i[c+0].y,l[3*c+2]=i[c+0].z,c++,s.attributes.position.needsUpdate=!0):i.length:c>0&&d%1==0&&(l[3*c+0]=i[c-1].x,l[3*c+1]=i[c-1].y,l[3*c+2]=i[c-1].z,c--,s.attributes.position.needsUpdate=!0),d+=1},n.add(m)}}const R=new class extends n{constructor(){super()}load(){var n;this.init("#webgl"),this.animate(),this.light({type:"AmbientLight",x:0,y:70,z:100}),this.light({type:"DirectionalLight",x:0,y:70,z:-200}),this.light({x:0,y:100,z:0}),this.create(),null==(n=this.scene)||n.remove(this.axesHelper),new b(this.scene,this.gui),new I(this.scene),this.renderer.localClippingEnabled=!0}create(){}animate(){var n,t;null==(n=this.stats)||n.begin(),requestAnimationFrame((()=>{this.animate()})),e.update(),this.renderer.render(this.scene,this.camera),null==(t=this.stats)||t.end()}};return x((()=>{R.load()})),y((()=>{R.gui.close(),R.gui.destroy()})),(n,e)=>(T(),P(M,null,[e[0]||(e[0]=S("div",{id:"webgl"},null,-1)),e[1]||(e[1]=S("div",{class:"title-name"},"烟花2",-1))],64))}});export{b as default};

var e=Object.defineProperty,t=(t,n,i)=>((t,n,i)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[n]=i)(t,"symbol"!=typeof n?n+"":n,i);import{B as n}from"./base-HDikCi6F.js";import{d as i,g as o,j as s,k as a,l as r,F as m,o as l}from"./@vue-H0c_gk4m.js";import{a as h,c as u,S as d,C as c,A as v,d as w,l as f}from"./three-BHpSmIVb.js";const P=i({__name:"FireWorksView",setup(e){class i{constructor(){t(this,"mesh")}init(e,t,n){const i=new u,o=100,s=new Float32Array(300);i.setAttribute("position",new w(s,3));const a=new Float32Array(300);i.setAttribute("toPosition",new w(a,3));const r=new Float32Array(o);i.setAttribute("aSize",new w(r,1));for(let l=0;l<o;l++){s[3*l]=t.x,s[3*l+1]=t.y,s[3*l+2]=t.z;const e=Math.random()*Math.PI*2,n=Math.random()*Math.PI*2,i=50*Math.random();a[3*l]=i*Math.sin(e)+i*Math.sin(n),a[3*l+1]=i*Math.cos(e)+i*Math.cos(n),a[3*l+2]=i*Math.sin(e)+i*Math.cos(n),r[l]=5*Math.random()+5}const m=new d({transparent:!0,blending:v,depthTest:!1,uniforms:{uTime:{value:0},uColor:{value:n}},vertexShader:"\n        attribute vec3 toPosition;\n        uniform float uTime;\n        void main(){\n            vec3 myPosition = position;\n            myPosition += toPosition * uTime;\n            \n\n            vec4 mvPosition = modelViewMatrix * vec4(myPosition, 1.0);\n           \n\n            gl_PointSize = 100.0 * 50.0 / -mvPosition.z * (1.0 - abs(sin(uTime)));\n\n            gl_Position = projectionMatrix * mvPosition;\n            \n        }\n      ",fragmentShader:"\n        uniform vec3 uColor;\n        void main(){\n            float alpha = 1.0 - distance(gl_PointCoord,vec2(0.5)) * 2.0;\n            gl_FragColor = vec4(uColor, alpha);\n        }\n      "});this.mesh=new f(i,m),this.mesh.onBeforeRender=()=>{m.uniforms.uTime.value+=.01,m.uniforms.uTime.value>=1.1&&this.dispose(e)},e.add(this.mesh)}dispose(e){var t;null==(t=this.mesh)||t.clear(),e.remove(this.mesh)}}class P{constructor(){t(this,"mesh")}init(e){const t=new h(0,0,0),n=new h(50*Math.random()-25,50*Math.random()+25,0),o=new u,s=new d({uniforms:{uTime:{value:0},uColor:{value:new c(Math.random(),Math.random(),Math.random())}},vertexShader:"\n        attribute vec3 toPosition;\n        uniform float uTime;\n       \n        void main(){\n            vec3 myPosition = position;\n            myPosition += toPosition * uTime;\n\n            vec4 mvPosition = modelViewMatrix * vec4(myPosition, 1.0);\n\n            gl_PointSize = 100.0 * 50.0 / -mvPosition.z;\n\n            gl_Position = projectionMatrix * mvPosition;\n            \n        }\n      ",fragmentShader:"\n        uniform vec3 uColor;\n        void main(){\n            float alpha = 1.0 - distance(gl_PointCoord,vec2(0.5)) * 2.0;\n            gl_FragColor = vec4(uColor, alpha);\n        }\n      ",transparent:!0,blending:v,depthTest:!1}),a=new Float32Array(t);o.setAttribute("position",new w(a,3)),o.setAttribute("toPosition",new w(new Float32Array(n),3)),this.mesh=new f(o,s),this.mesh.onBeforeRender=()=>{s.uniforms.uTime.value+=.01,s.uniforms.uTime.value>=1&&(this.dispose(e),(new i).init(e,n,s.uniforms.uColor.value))},e.add(this.mesh)}dispose(e){var t;null==(t=this.mesh)||t.clear(),e.remove(this.mesh)}}const p=new class extends n{constructor(){super()}load(){this.init("#webgl"),this.animate(),this.create(),setInterval((()=>{this.create()}),1e3)}create(){(new P).init(this.scene)}animate(){var e,t;null==(e=this.stats)||e.begin(),this.timer=requestAnimationFrame((()=>{this.animate()})),this.renderer.render(this.scene,this.camera),null==(t=this.stats)||t.end()}};return o((()=>{p.load()})),s((()=>{p.destroy()})),(e,t)=>(l(),a(m,null,[t[0]||(t[0]=r("div",{id:"webgl"},null,-1)),t[1]||(t[1]=r("div",{class:"title-name"},"烟花",-1))],64))}});export{P as default};

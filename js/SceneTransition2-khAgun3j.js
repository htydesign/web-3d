var e=Object.defineProperty,t=(t,n,r)=>((t,n,r)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[n]=r)(t,"symbol"!=typeof n?n+"":n,r);import{B as n}from"./base-Blzby6IQ.js";import{Q as r,aJ as a,B as s,C as i,T as l,n as u,aj as o,W as c,b as v,P as h,S as m,M as p,I as d,O as x,a as g,a5 as f}from"./three-CQ-nF5qD.js";import{V as w}from"./virtual-scroll-Dtm-vLdV.js";import{d as y,z as T,A as P,g as S,j as b,F as V,o as U}from"./@vue-DISYwsDo.js";import"./@amap-Bx2D3lnM.js";const j=y({__name:"SceneTransition2",setup(e){const y=new class extends n{constructor(){super(),t(this,"sceneList",[]),t(this,"currentState",0),t(this,"current",0),t(this,"next",0),t(this,"target",[]),t(this,"postScene",new r),t(this,"postCamera",new a(-.5,.5,.5,-.5,-1e3,1e3)),t(this,"postPlane")}load(){var e;this.init("#webgl"),null==(e=this.controls)||e.dispose();[{geo:new s(10,10,10),bg:new i(13691840),map:(new l).load("./texture/dot.jpg")},{geo:new u(10,10,10),bg:new i(5078703),map:(new l).load("./texture/light.jpg")},{geo:new o(10,5),bg:new i(13082192),map:(new l).load("./texture/sphere-normal.jpg")}].forEach((e=>{var t;const n=this.createScene(e.geo,e.bg,e.map);this.sceneList.push(n),null==(t=this.renderer)||t.compile(n,this.camera),this.target.push(new c(this.innerWidth,this.innerHeight))})),this.initPost(),this.animate();(new w).on((e=>{this.currentState-=e.deltaY/4e3,this.currentState=(this.currentState+3e3)%3}))}initPost(){this.postPlane=new v(new h(1,1),new m({uniforms:{uTexture1:{value:null},uTexture2:{value:null},uProgress:{value:0},uTime:{value:0}},transparent:!0,vertexShader:"\n          varying vec2 vUv;\n          void main(){\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          }\n        ",fragmentShader:"\n          vec2 mirrored(vec2 v){\n            vec2 m = mod(v, 2.0);\n            return mix(m, 2.0 - m, step(1.0, m));          \n          }\n\n          float tri(float p){\n            return mix(p, 1.0 - p, step(0.5, p)) * 2.0;\n          }\n\n          uniform sampler2D uTexture1;\n          uniform sampler2D uTexture2;\n          uniform float uProgress;\n          uniform float uTime;\n\n          varying vec2 vUv;\n\n          void main(){\n            // vec4 texture1 = texture2D(uTexture1, vUv);\n            // vec4 texture2 = texture2D(uTexture2, vUv);\n            // float sweep = step(vUv.y, uProgress);\n\n            // vec4 finalColor = mix(texture1, texture2, sweep);\n            \n            // gl_FragColor = finalColor;\n\n\n\n            float p = uProgress;\n            vec2 vUv1 = vUv;\n            float delayValue = p * 7.0 - vUv.y * 2.0 + vUv.x - 2.0;\n            delayValue = clamp(delayValue, 0.0, 1.0);\n\n            float accel = 0.1;\n\n            vec2 translateValue = vec2(p) + delayValue * accel;\n            vec2 translateValue1 = translateValue * vec2(-0.5, 1.0);\n            vec2 translateValue2 = (translateValue - 1.0 - accel) * vec2(-0.5, 1.0);\n\n            vec2 w = sin(sin(uTime) * vec2(0.0, 0.3) + vUv.yx * vec2(0.0,4.0)) * vec2(0.0, 0.5);\n            vec2 xy = w * (tri(p) * 0.5 + tri(delayValue) * 0.5);\n\n            vec2 uv1 = vUv1 + translateValue1 + xy;\n            vec2 uv2 = vUv1 + translateValue2 + xy;\n\n            vec4 t1 = texture2D(uTexture1, mirrored(uv1));\n            vec4 t2 = texture2D(uTexture2, mirrored(uv2));\n\n            gl_FragColor = mix(t1, t2, delayValue);\n\n          }\n        "})),this.postScene.add(this.postPlane)}createScene(e,t,n){const a=new r;a.background=t;const s=new p({map:n}),i=new d(e,s,500);i.instanceMatrix.needsUpdate=!0;const l=new x;for(let r=0;r<500;r++){const e=(new g).randomDirection().multiplyScalar(80);l.position.copy(e),l.scale.setScalar(Math.random()),l.updateMatrix(),i.setMatrixAt(r,l.matrix)}return a.add(i),a}animate(){var e,t;null==(e=this.stats)||e.begin(),requestAnimationFrame((()=>{this.animate()})),f.update(),this.current=Math.floor(this.currentState),this.next=(this.current+1)%this.sceneList.length,this.renderer.setRenderTarget(this.target[this.current]),this.renderer.render(this.sceneList[this.current],this.camera),this.renderer.setRenderTarget(this.target[this.next]),this.renderer.render(this.sceneList[this.next],this.camera),this.renderer.setRenderTarget(null),this.postPlane.material.uniforms.uTexture1.value=this.target[this.current].texture,this.postPlane.material.uniforms.uTexture2.value=this.target[this.next].texture,this.postPlane.material.uniforms.uProgress.value=this.currentState%1,this.postPlane.material.uniforms.uTime.value+=.005,this.current=this.next,this.renderer.render(this.postScene,this.postCamera),this.sceneList.forEach((e=>{e.rotateY(.005)})),null==(t=this.stats)||t.end()}};return T((()=>{y.load()})),P((()=>{y.destroy()})),(e,t)=>(U(),S(V,null,[t[0]||(t[0]=b("div",{id:"webgl"},null,-1)),t[1]||(t[1]=b("div",{class:"title-name"},"场景切换 （滚动鼠标）",-1))],64))}});export{j as default};

var e=Object.defineProperty,n=(n,o,a)=>((n,o,a)=>o in n?e(n,o,{enumerable:!0,configurable:!0,writable:!0,value:a}):n[o]=a)(n,"symbol"!=typeof o?o+"":o,a);import{B as o}from"./base-CTHtcInk.js";import{V as a,C as r,T as t,M as i,b as s,S as l,a as v,h as c,A as u,G as d,t as m,P as p,D as f,Q as h}from"./three-U1z093Ie.js";import{d as g,z as w,A as C,g as y,o as b}from"./@vue-B4sUqkWa.js";const U={id:"webgl"},T=g({__name:"EarthView",setup(e){const g=new class extends o{constructor(){super(),n(this,"uniforms",{uTime:{value:0},uSpeed:{value:0},uFade:{value:new a(0,1)},uStartColor:{value:new r(16777215)}})}load(){this.init("#webgl"),this.animate(),this.create()}create(){var e,n;const o=new r(16777215*Math.random()),a=(new t).load("./texture/earth_specular_2048.jpg"),d=new i(new s(50,128,128),new l({uniforms:{uMap:{value:a},uColor:{value:o}},transparent:!0,wireframe:!0,vertexShader:"\n          varying vec2 vUv;\n          void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          }\n        ",fragmentShader:"\n            uniform sampler2D uMap;\n            uniform vec3 uColor;\n            varying vec2 vUv;\n            void main(){\n                vec3 color = texture2D(uMap, vUv).rgb;\n                if(color.r >= 0.59 && color.g >= 0.59 && color.b >= 0.59){\n                    discard;\n                }else {\n                    color = vec3(uColor);\n                }\n                gl_FragColor = vec4(color, 1.0);\n            }\n        "}));null==(e=this.scene)||e.add(d);const m=new i(new s(49,64,64),new v({color:0}));null==(n=this.scene)||n.add(m);const{position:p}=d.geometry.attributes;for(let r=0;r<20;r++){const e=Math.floor(p.count*Math.random()),n=new c(p.array[e],p.array[e+1],p.array[e+2]);this.createLightCube(n,o)}new i(new s(60,64,64),new l({blending:u,uniforms:{uColor:{value:o}},transparent:!0,fragmentShader:"\n            uniform vec3 uColor;\n            void main(){\n                gl_FragColor = vec4(1.0,1.0,1.0, 0.01);\n            }\n        "}))}createLightCube(e,n){var o;const a=new d;a.lookAt(new c(0,0,0)),a.position.copy(e);const r=(new c).subVectors(new c(0,0,0),e);r.normalize();const t=new h;t.setFromUnitVectors(new c(0,-1,0),r),a.quaternion.multiply(t);const s=new m(.6,15,20),v=new l({transparent:!0,uniforms:{uColor:{value:n}},vertexShader:"\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n      ",fragmentShader:"\n        uniform vec3 uColor;\n        varying vec2 vUv;\n        void main(){\n            vec3 color1 = vec3(1.0);\n            vec3 color2 = mix(color1, uColor, vUv.y);\n            float alpha = smoothstep(1.0, 0.1, vUv.y);\n            gl_FragColor = vec4(color2, alpha);\n        }\n      "}),u=new i(s,v);u.position.set(0,7.5,0),a.add(u);const g=new p(6,6),w=new l({transparent:!0,side:f,depthTest:!0,uniforms:{uTime:{value:.5},uColor:{value:n}},vertexShader:"\n        varying vec2 vUv;\n        void main(){\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      ",fragmentShader:"\n        uniform float uTime;\n        uniform vec3 uColor;\n        varying vec2 vUv;\n        void main(){\n           \n            float dis = distance(vUv, vec2(0.5));\n\n            float dist = fract((length(vUv - vec2(0.5)) /0.5 - uTime * 1.0) * 2.0);\n            float radius = 0.10 + dis;\n            vec3 color = vec3(step(radius, dist));\n\n            float alpha = 1.0;\n            if(color.r == 1.0){\n              alpha = 0.0;    \n              discard;          \n            }\n            color += vec3(1.0);\n\n\n            vec4 vColor = vec4(color, alpha);\n\n            float len = distance(vUv, vec2(0.5));\n            float strength = smoothstep(0.5, 0.35, len);\n            vColor.a *= strength;\n            \n            if(len>0.5){\n              discard;\n            }\n\n\n            gl_FragColor = vColor;\n         \n\n\n            // float dis = distance(vUv,vec2(0.5,0.5));\n            // float opacity = smoothstep(0.4 * uTime, 0.5 * uTime, dis);\n            // // opacity *= step(dis, 0.5 * uTime);\n            // //渐变消失\n            // opacity -= (uTime - 0.8) * 5.0 * step(0.8, uTime);\n            // vec3 disColor = vec3(1.0);\n            // vec3 color = disColor * uTime;\n            // gl_FragColor = vec4(color,opacity);\n        }\n      "}),C=new i(g,w);C.rotateX(-Math.PI/2),C.position.set(0,.5,0),a.add(C),C.onBeforeRender=()=>{w.uniforms.uTime.value>=1&&(w.uniforms.uTime.value=0),w.uniforms.uTime.value+=.005},null==(o=this.scene)||o.add(a)}animate(){var e,n;null==(e=this.stats)||e.begin(),requestAnimationFrame((()=>{this.animate()})),this.renderer.render(this.scene,this.camera),null==(n=this.stats)||n.end()}};return w((()=>{g.load()})),C((()=>{g.gui.close(),g.gui.destroy()})),(e,n)=>(b(),y("div",U))}});export{T as default};

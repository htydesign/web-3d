var n=Object.defineProperty,e=(e,o,r)=>((e,o,r)=>o in e?n(e,o,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[o]=r)(e,"symbol"!=typeof o?o+"":o,r);import{B as o}from"./base-DlPHiVva.js";import{d as r,S as i,C as s,M as t,ad as v,ae as x,V as a,af as c,e as l}from"./three-BA51zQm8.js";import{d as u,z as m,A as y,g as d,j as p,F as f,o as h}from"./@vue-B4sUqkWa.js";const z=u({__name:"DoughnutView",setup(n){const u=new class extends o{constructor(){super(),e(this,"composer")}load(){this.init("#webgl"),this.animate(),this.create()}create(){var n,e,o,l,u,m;const y=new r(50,10,200,200),d=new i({wireframe:!1,uniforms:{uTime:{value:0},uColor1:{value:new s(3382179)},uColor2:{value:new s(8938825)},uLayerCount:{value:10},uFrequency:{value:10},uOffset:{value:10}},vertexShader:"\n        vec3 mod289(vec3 x) {\n          return x - floor(x * (1.0 / 289.0)) * 289.0;\n        }\n\n        vec4 mod289(vec4 x) {\n          return x - floor(x * (1.0 / 289.0)) * 289.0;\n        }\n\n        vec4 permute(vec4 x) {\n            return mod289(((x*34.0)+10.0)*x);\n        }\n\n        vec4 taylorInvSqrt(vec4 r)\n        {\n          return 1.79284291400159 - 0.85373472095314 * r;\n        }\n\n        float snoise(vec3 v)\n          {\n          const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n          const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n        // First corner\n          vec3 i  = floor(v + dot(v, C.yyy) );\n          vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n        // Other corners\n          vec3 g = step(x0.yzx, x0.xyz);\n          vec3 l = 1.0 - g;\n          vec3 i1 = min( g.xyz, l.zxy );\n          vec3 i2 = max( g.xyz, l.zxy );\n\n          //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n          //   x1 = x0 - i1  + 1.0 * C.xxx;\n          //   x2 = x0 - i2  + 2.0 * C.xxx;\n          //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n          vec3 x1 = x0 - i1 + C.xxx;\n          vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n          vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n        // Permutations\n          i = mod289(i);\n          vec4 p = permute( permute( permute(\n                    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n                  + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n                  + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n        // Gradients: 7x7 points over a square, mapped onto an octahedron.\n        // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n          float n_ = 0.142857142857; // 1.0/7.0\n          vec3  ns = n_ * D.wyz - D.xzx;\n\n          vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n          vec4 x_ = floor(j * ns.z);\n          vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n          vec4 x = x_ *ns.x + ns.yyyy;\n          vec4 y = y_ *ns.x + ns.yyyy;\n          vec4 h = 1.0 - abs(x) - abs(y);\n\n          vec4 b0 = vec4( x.xy, y.xy );\n          vec4 b1 = vec4( x.zw, y.zw );\n\n          //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n          //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n          vec4 s0 = floor(b0)*2.0 + 1.0;\n          vec4 s1 = floor(b1)*2.0 + 1.0;\n          vec4 sh = -step(h, vec4(0.0));\n\n          vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n          vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n          vec3 p0 = vec3(a0.xy,h.x);\n          vec3 p1 = vec3(a0.zw,h.y);\n          vec3 p2 = vec3(a1.xy,h.z);\n          vec3 p3 = vec3(a1.zw,h.w);\n\n        //Normalise gradients\n          vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n          p0 *= norm.x;\n          p1 *= norm.y;\n          p2 *= norm.z;\n          p3 *= norm.w;\n\n        // Mix final noise value\n          vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n          m = m * m;\n          return 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n        }\n\n        varying vec2 vUv;\n        varying vec3 vPosition;\n        varying vec3 vNormal;\n        varying vec3 vPattern;\n\n        uniform float uTime;\n        uniform float uFrequency;\n        uniform float uOffset;\n\n        void main() {\n          vUv = uv;\n          vPosition = position;\n          vNormal = normal;\n\n\n          //如果x的值 > 1.0,则x减去1.0,始终把x的值控制在【0,1】之间\n          float d = uTime ;\n          float x = vUv.x + d;\n          if(x > 1.0){\n            x -= 1.0;\n          }\n          float noiseMultiplier = clamp((abs(x - 0.5 ) - 0.3  ) * uOffset, 0.0, 100.0);\n\n          // vPattern = vec3(noiseMultiplier / 100.0);\n          float noise = snoise(vPosition / (110.0 - uFrequency));\n          float displacement = noise * noiseMultiplier;\n          vec3 newPosition = vPosition + vNormal * displacement;\n\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n        }\n      ",fragmentShader:"\n        vec3 mod289(vec3 x) {\n          return x - floor(x * (1.0 / 289.0)) * 289.0;\n        }\n\n        vec4 mod289(vec4 x) {\n          return x - floor(x * (1.0 / 289.0)) * 289.0;\n        }\n\n        vec4 permute(vec4 x) {\n            return mod289(((x*34.0)+10.0)*x);\n        }\n\n        vec4 taylorInvSqrt(vec4 r)\n        {\n          return 1.79284291400159 - 0.85373472095314 * r;\n        }\n\n        float snoise(vec3 v)\n          {\n          const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n          const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n        // First corner\n          vec3 i  = floor(v + dot(v, C.yyy) );\n          vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n        // Other corners\n          vec3 g = step(x0.yzx, x0.xyz);\n          vec3 l = 1.0 - g;\n          vec3 i1 = min( g.xyz, l.zxy );\n          vec3 i2 = max( g.xyz, l.zxy );\n\n          //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n          //   x1 = x0 - i1  + 1.0 * C.xxx;\n          //   x2 = x0 - i2  + 2.0 * C.xxx;\n          //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n          vec3 x1 = x0 - i1 + C.xxx;\n          vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n          vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n        // Permutations\n          i = mod289(i);\n          vec4 p = permute( permute( permute(\n                    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n                  + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n                  + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n        // Gradients: 7x7 points over a square, mapped onto an octahedron.\n        // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n          float n_ = 0.142857142857; // 1.0/7.0\n          vec3  ns = n_ * D.wyz - D.xzx;\n\n          vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n          vec4 x_ = floor(j * ns.z);\n          vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n          vec4 x = x_ *ns.x + ns.yyyy;\n          vec4 y = y_ *ns.x + ns.yyyy;\n          vec4 h = 1.0 - abs(x) - abs(y);\n\n          vec4 b0 = vec4( x.xy, y.xy );\n          vec4 b1 = vec4( x.zw, y.zw );\n\n          //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n          //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n          vec4 s0 = floor(b0)*2.0 + 1.0;\n          vec4 s1 = floor(b1)*2.0 + 1.0;\n          vec4 sh = -step(h, vec4(0.0));\n\n          vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n          vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n          vec3 p0 = vec3(a0.xy,h.x);\n          vec3 p1 = vec3(a0.zw,h.y);\n          vec3 p2 = vec3(a1.xy,h.z);\n          vec3 p3 = vec3(a1.zw,h.w);\n\n        //Normalise gradients\n          vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n          p0 *= norm.x;\n          p1 *= norm.y;\n          p2 *= norm.z;\n          p3 *= norm.w;\n\n        // Mix final noise value\n          vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n          m = m * m;\n          return 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n        }\n\n        varying vec2 vUv;\n        varying vec3 vPosition;\n        varying vec3 vNormal;\n        varying vec3 vPattern;\n\n        uniform float uTime;\n        uniform vec3 uColor1;\n        uniform vec3 uColor2;\n        uniform float uLayerCount;\n        void main() {\n          float noise = snoise(vec3(vPosition.z  / abs(uLayerCount - 19.0)));\n          vec3 purpleCoolor = uColor1 / uColor2;\n          vec3 color = vec3(noise + noise) * purpleCoolor;\n          gl_FragColor = vec4(color, 1.0);\n        }\n      "}),p=new t(y,d);p.onBeforeRender=()=>{d.uniforms.uTime.value>1&&(d.uniforms.uTime.value=0),d.uniforms.uTime.value+=.01},null==(n=this.gui)||n.addColor(d.uniforms,"uColor1").onChange((n=>{d.uniforms.uColor1.value=n})),null==(e=this.gui)||e.addColor(d.uniforms,"uColor2").onChange((n=>{d.uniforms.uColor2.value=n})),null==(o=this.gui)||o.add(d.uniforms.uLayerCount,"value",1,20,1).name("甜甜圈层数"),null==(l=this.gui)||l.add(d.uniforms.uFrequency,"value",10,100,10).name("频率"),null==(u=this.gui)||u.add(d.uniforms.uOffset,"value",10,100,10).name("偏移量");const f=new v(this.scene,this.camera),h={threshold:.68,strength:1.8,radius:.05,exposure:1},z=new x(new a(window.innerWidth,window.innerHeight),1,.2,.5);z.threshold=h.threshold,z.strength=h.strength,z.radius=h.radius;const g=this.gui.addFolder("bloom");g.add(h,"threshold",0,1).onChange((function(n){z.threshold=Number(n)})),g.add(h,"strength",0,3).onChange((function(n){z.strength=Number(n)})),g.add(h,"radius",0,1).onChange((function(n){z.radius=Number(n)})),this.composer=new c(this.renderer),this.composer.addPass(f),this.composer.addPass(z),null==(m=this.scene)||m.add(p)}animate(){var n,e,o;null==(n=this.stats)||n.begin(),requestAnimationFrame((()=>{this.animate()})),l.update(),null==(e=this.composer)||e.render(),null==(o=this.stats)||o.end()}};return m((()=>{u.load()})),y((()=>{u.gui.close(),u.gui.destroy()})),(n,e)=>(h(),d(f,null,[e[0]||(e[0]=p("div",{id:"webgl"},null,-1)),e[1]||(e[1]=p("div",{class:"title-name"},"甜甜圈",-1))],64))}});export{z as default};

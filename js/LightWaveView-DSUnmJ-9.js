var e=Object.defineProperty,n=(n,t,r)=>((n,t,r)=>t in n?e(n,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):n[t]=r)(n,"symbol"!=typeof t?t+"":t,r);import{B as t}from"./base-HDikCi6F.js";import{T as r,Q as i,V as o,a as s,aK as a,R as c,a5 as v,W as u,aL as l,aY as g,b8 as x,b9 as h,P as m,S as d,b as f}from"./three-BHpSmIVb.js";import{d as y,g as p,j as z,k as C,l as T,F as w,o as P}from"./@vue-H0c_gk4m.js";const b=y({__name:"LightWaveView",setup(e){const y=new class extends t{constructor(){super(new s(0,0,5)),n(this,"textureLoader",new r),n(this,"vcCenterMesh"),n(this,"scene2",new i),n(this,"scene3",new i),n(this,"orthographicCamera"),n(this,"vcMesh"),n(this,"renderTarget"),n(this,"renderTarget2"),n(this,"centerMesh"),n(this,"screeMesh"),n(this,"centerMesh3"),n(this,"material3"),n(this,"mouse",new o),n(this,"pointer",new o),n(this,"time",0)}load(){var e;this.init("#webgl"),null==(e=this.controls)||e.dispose();const n=this.innerHeight,t=this.innerWidth/this.innerHeight;this.orthographicCamera=new a(-n*t/2,n*t/2,n/2,-n/2,-1e3,1e3),this.orthographicCamera.position.set(0,0,2),this.setWebglTarget(),this.addObject(),this.animate();const r=new c;document.addEventListener("mousemove",(e=>{this.pointer.x=e.clientX/this.innerWidth*2-1,this.pointer.y=-e.clientY/this.innerHeight*2+1,r.setFromCamera(this.pointer,this.camera);r.intersectObject(this.centerMesh).length>0?0===this.centerMesh.material.uniforms.uOver.value&&(this.centerMesh.material.uniforms.uOver.value=1,new v.Tween(this.centerMesh).to({scale:{x:1.05,y:1.05,z:1.05}},500).easing(v.Easing.Quadratic.Out).start()):1===this.centerMesh.material.uniforms.uOver.value&&(this.centerMesh.material.uniforms.uOver.value=0,new v.Tween(this.centerMesh).to({scale:{x:1,y:1,z:1}},500).easing(v.Easing.Quadratic.Out).start())}))}setWebglTarget(){this.renderTarget=new u(this.innerWidth,this.innerHeight,{minFilter:l,magFilter:g,format:x,type:h,stencilBuffer:!1}),this.renderTarget2=new u(this.innerWidth,this.innerHeight)}addObject(){var e,n;const t=this.textureLoader.load("../texture/vc2.jpg"),i=(new r).load("../texture/vc_cell2.jpg");i.offset.set(-.2,.2);const s=(new r).load("../texture/noise.jpg"),a=new m(this.innerWidth,this.innerHeight),c=new d({uniforms:{uScreenTexture:{value:t},uCenterTexture:{value:i},uTime:{value:0},uResolution:{value:new o(this.innerWidth,this.innerHeight)}},transparent:!0,vertexShader:"\n        varying vec2 vUv;\n        varying vec3 pos;\n        void main() {\n          vUv = uv;\n          pos = position;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      ",fragmentShader:"\n        varying vec2 vUv;\n        varying vec3 pos;\n\n        uniform sampler2D uScreenTexture;\n        uniform sampler2D uCenterTexture;\n        uniform vec2 uResolution;\n\n        uniform float uTime;\n\n        void main() {\n          vec2 uv = vUv;\n          float ratio = uResolution.y / uResolution.x;\n          uv.y *= ratio;\n          uv.y += ratio/2.0;\n          vec4 screenColor = texture2D(uScreenTexture, uv);\n\n          vec2 uv2 = uv;\n          uv2.y += sin(uTime * 0.1);\n\n          vec4 screenColor2 = texture2D(uScreenTexture, uv2);\n\n          vec4 centerColor = texture2D(uCenterTexture, vUv);\n\n          vec4 finalColor = screenColor + screenColor2 + centerColor;\n\n\n          vec3 fColor = mix(screenColor.rgb, centerColor.rgb, 0.70);\n\n          // gl_FragColor = finalColor;\n          gl_FragColor = screenColor;\n        }\n     "});this.screeMesh=new f(a,c),this.scene2.add(this.screeMesh);const v=new m(8,4),u=new d({uniforms:{uCenterTexture:{value:i},uScreenTexture:{value:t},uTime:{value:0},uResolution:{value:new o(this.innerWidth,this.innerHeight)},uMouse:{value:this.mouse},uOver:{value:0}},depthTest:!1,depthWrite:!1,transparent:!0,vertexShader:"\n        varying vec2 vUv;\n        uniform vec2 uMouse;\n\n        float PI = 3.1415926535897932384626433832795;\n\n        mat4 rotation3d(vec3 axis, float angle) {\n            axis = normalize(axis);\n            float s = sin(angle);\n            float c = cos(angle);\n            float oc = 1.0 - c;\n\n            return mat4(\n              oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n              oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n              oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n              0.0,                                0.0,                                0.0,                                1.0\n            );\n          }\n          vec3 rotate(vec3 v, vec3 axis, float angle) {\n            return (rotation3d(axis, angle) * vec4(v, 1.0)).xyz;\n          }\n\n        void main() {\n          vUv = uv;\n          vec3 pos = position;\n          // pos.x += uMouse.x * 0.5;\n          // pos.y += uMouse.y * 0.5;\n          float theta = (uMouse.x * 0.5) * 2.0 * PI;\n          vec3 dir = vec3(sin(theta), cos(theta), 0.0);\n          vec3 temp = rotate(pos, vec3(0.0, 0.0, 1.0), theta);\n           pos.x = pos.x * dir.x;\n\n\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      ",fragmentShader:"\n        varying vec2 vUv;\n        uniform sampler2D uCenterTexture;\n        uniform sampler2D uScreenTexture;\n        uniform float uTime;\n        uniform vec2 uResolution;\n\n        float sdCircle(vec2 p, float r) {\n          return length(p) - r;\n        }\n\n        void main() {\n          float dist = length(vUv - vec2(0.5,0.5));\n          vec2 uv = vec2(fract( vUv * 1.0));\n          float d = sdCircle(uv- vec2(0.5,0.5), 0.3) * sin(uTime);\n\n\n\n          vec4 centerColor = vec4(0.0,0.0,0.0,1.0) + texture2D(uCenterTexture,vUv);\n        \n\n\n          gl_FragColor = centerColor;\n          // gl_FragColor = vec4(vec3(uv,1.0), 1.0);\n        }\n     "});this.centerMesh=new f(v,u),null==(e=this.scene)||e.add(this.centerMesh);const l=new m(this.innerWidth,this.innerHeight);this.material3=new d({uniforms:{uCenterTexture:{value:null},uScreenTexture:{value:t},uTime:{value:0},uResolution:{value:new o(this.innerWidth,this.innerHeight)},uMouse:{value:this.mouse},uNoiseTexture:{value:s}},depthTest:!1,depthWrite:!1,transparent:!0,vertexShader:"\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      ",fragmentShader:"\n        varying vec2 vUv;\n        uniform sampler2D uCenterTexture;\n        uniform sampler2D uScreenTexture;\n        uniform sampler2D uNoiseTexture;\n        uniform float uTime;\n        uniform vec2 uResolution;\n        uniform vec2 uMouse;\n\n        float PI = 3.141592653589793238;\n\n\n        vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n        vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n        vec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\n        float cnoise(vec3 P){\n          vec3 Pi0 = floor(P); // Integer part for indexing\n          vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n          Pi0 = mod(Pi0, 289.0);\n          Pi1 = mod(Pi1, 289.0);\n          vec3 Pf0 = fract(P); // Fractional part for interpolation\n          vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n          vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n          vec4 iy = vec4(Pi0.yy, Pi1.yy);\n          vec4 iz0 = Pi0.zzzz;\n          vec4 iz1 = Pi1.zzzz;\n\n          vec4 ixy = permute(permute(ix) + iy);\n          vec4 ixy0 = permute(ixy + iz0);\n          vec4 ixy1 = permute(ixy + iz1);\n\n          vec4 gx0 = ixy0 / 7.0;\n          vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n          gx0 = fract(gx0);\n          vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n          vec4 sz0 = step(gz0, vec4(0.0));\n          gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n          gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n          vec4 gx1 = ixy1 / 7.0;\n          vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n          gx1 = fract(gx1);\n          vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n          vec4 sz1 = step(gz1, vec4(0.0));\n          gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n          gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n          vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n          vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n          vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n          vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n          vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n          vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n          vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n          vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n          vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n          g000 *= norm0.x;\n          g010 *= norm0.y;\n          g100 *= norm0.z;\n          g110 *= norm0.w;\n          vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n          g001 *= norm1.x;\n          g011 *= norm1.y;\n          g101 *= norm1.z;\n          g111 *= norm1.w;\n\n          float n000 = dot(g000, Pf0);\n          float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n          float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n          float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n          float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n          float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n          float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n          float n111 = dot(g111, Pf1);\n\n          vec3 fade_xyz = fade(Pf0);\n          vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n          vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n          float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n          return 2.2 * n_xyz;\n        }\n\n\n        \n        float sdCircle(vec2 p, float r) {\n          return length(p) - r;\n        }\n\n        float sdBox(vec2 p, vec2 b) {\n          vec2 d = abs(p) - b;\n          return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n        }\n\n        float sdRoundBox(vec2 p, vec2 b, float r) {\n          vec2 d = abs(p) - b;\n          return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - r;\n        }\n\n        void main() {\n          vec2 uv = vUv;\n          float ratio = uResolution.y / uResolution.x;\n          uv.y *= ratio;\n          uv.y += ratio/2.0;\n\n          vec2 uv2 = uv;\n\n          float theta = cnoise(vec3(uv * 6.0 , uTime * 1.5)) ;\n\n          uv += vec2(sin(theta) * 0.05, cos(theta) * 0.05) + uMouse * 0.1;\n\n          if(uv.x < 0.0 || uv.x > 1.0){\n            // discard;\n          }\n          if(uv.y > 1.0 || uv.y < 0.0){\n            // discard;\n          }\n          \n          vec4 bgColor = texture2D(uScreenTexture, uv2);\n\n          vec4 screenColor = texture2D(uScreenTexture, uv);\n          vec4 centerColor = texture2D(uCenterTexture, vUv);\n          vec4 noiseColor = texture2D(uNoiseTexture, uv);\n\n          // vec3 finalColor = mix(screenColor.rgb , centerColor.rgb, 0.90);\n          // vec3 finalColor = screenColor.rgb +  vec3( 1.0 ) *centerColor.rgb ;\n         \n          // float mixColor = smoothstep(finalColor.g,noiseColor.b,abs(sin(uTime )));\n\n          \n          float d = sdCircle(uv - vec2(0.5), 0.15);\n\n\n          vec4 screenColor2 = mix(screenColor,noiseColor,d);\n          \n          // screenColor2.a = 0.5;\n           vec3 finalColor =bgColor.rgb * 0.2 + screenColor2.rgb * 0.3 + centerColor.rgb * centerColor.a * 0.57;\n           finalColor -= d;\n\n          gl_FragColor = screenColor2;\n          gl_FragColor = vec4(vec3(finalColor),1.0);\n        }\n     "}),this.centerMesh3=new f(l,this.material3),null==(n=this.scene3)||n.add(this.centerMesh3)}animate(){var e,n,t;null==(e=this.stats)||e.begin(),this.timer=requestAnimationFrame((()=>{this.animate()})),v.update(),this.time+=.01,this.centerMesh.material.uniforms.uTime.value=this.time,this.material3.uniforms.uTime.value=this.time,this.mouse.lerp(this.pointer,.1),this.renderer.setRenderTarget(this.renderTarget),this.renderer.render(this.scene,this.camera),this.material3.uniforms.uCenterTexture.value=null==(n=this.renderTarget)?void 0:n.texture,this.renderer.setRenderTarget(null),this.renderer.clear(),this.renderer.render(this.scene3,this.orthographicCamera),null==(t=this.stats)||t.end()}};return p((()=>{y.load()})),z((()=>{y.destroy()})),(e,n)=>(P(),C(w,null,[n[0]||(n[0]=T("div",{id:"webgl"},null,-1)),n[1]||(n[1]=T("div",{class:"title-name"},"light-wave",-1))],64))}});export{b as default};

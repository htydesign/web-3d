var n=Object.defineProperty,e=(e,i,r)=>((e,i,r)=>i in e?n(e,i,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[i]=r)(e,"symbol"!=typeof i?i+"":i,r);import{B as i}from"./base-C9hChz8a.js";import{G as r,af as s,ag as t,a9 as o,z as a,b as c,ah as v,aQ as l}from"./three-BV2RzHAl.js";import{d as m,r as u,z as x,A as p,g as d,j as y,B as h,v as w,F as f,o as g}from"./@vue-B4sUqkWa.js";import{_ as z}from"./index-C1nucYKT.js";import"./pinia-C4SihLJg.js";import"./vue-router-CANWKAPm.js";const b=z(m({__name:"MusicView",setup(n){const m=u(!1);const z=new class extends i{constructor(){super(),e(this,"group",new r),e(this,"analyser"),e(this,"uFrequency",0),e(this,"sound"),e(this,"audioLoader",new s),e(this,"listener",new t),e(this,"mesh")}load(){var n;this.init("#webgl"),this.animate(),this.create(),null==(n=this.sound)||n.stop()}create(){var n;const e=new o(25,500,500),i=new a({uniforms:{uTime:{value:0},uFrequency:{value:0}},wireframe:!1,wireframeLinewidth:1,transparent:!0,vertexShader:"\n        varying vec2 vUv;\n        uniform float uTime;\n        varying vec3 vNormal;\n        varying vec3 vColor;\n\n        uniform float uFrequency;\n\n        // Simplex 4D Noise \n        // by Ian McEwan, Ashima Arts\n        vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n        float permute(float x){return floor(mod(((x*34.0)+1.0)*x, 289.0));}\n        vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n        float taylorInvSqrt(float r){return 1.79284291400159 - 0.85373472095314 * r;}\n\n        vec4 grad4(float j, vec4 ip){\n        const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n        vec4 p,s;\n\n        p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n        p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n        s = vec4(lessThan(p, vec4(0.0)));\n        p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n        return p;\n        }\n\n        float snoise(vec4 v){\n        const vec2  C = vec2( 0.138196601125010504,  // (5 - sqrt(5))/20  G4\n                                0.309016994374947451); // (sqrt(5) - 1)/4   F4\n        // First corner\n        vec4 i  = floor(v + dot(v, C.yyyy) );\n        vec4 x0 = v -   i + dot(i, C.xxxx);\n\n        // Other corners\n\n        // Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n        vec4 i0;\n\n        vec3 isX = step( x0.yzw, x0.xxx );\n        vec3 isYZ = step( x0.zww, x0.yyz );\n        //  i0.x = dot( isX, vec3( 1.0 ) );\n        i0.x = isX.x + isX.y + isX.z;\n        i0.yzw = 1.0 - isX;\n\n        //  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n        i0.y += isYZ.x + isYZ.y;\n        i0.zw += 1.0 - isYZ.xy;\n\n        i0.z += isYZ.z;\n        i0.w += 1.0 - isYZ.z;\n\n        // i0 now contains the unique values 0,1,2,3 in each channel\n        vec4 i3 = clamp( i0, 0.0, 1.0 );\n        vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n        vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n        //  x0 = x0 - 0.0 + 0.0 * C \n        vec4 x1 = x0 - i1 + 1.0 * C.xxxx;\n        vec4 x2 = x0 - i2 + 2.0 * C.xxxx;\n        vec4 x3 = x0 - i3 + 3.0 * C.xxxx;\n        vec4 x4 = x0 - 1.0 + 4.0 * C.xxxx;\n\n        // Permutations\n        i = mod(i, 289.0); \n        float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n        vec4 j1 = permute( permute( permute( permute (\n                    i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n                + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n                + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n                + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n        // Gradients\n        // ( 7*7*6 points uniformly over a cube, mapped onto a 4-octahedron.)\n        // 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n\n        vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n        vec4 p0 = grad4(j0,   ip);\n        vec4 p1 = grad4(j1.x, ip);\n        vec4 p2 = grad4(j1.y, ip);\n        vec4 p3 = grad4(j1.z, ip);\n        vec4 p4 = grad4(j1.w, ip);\n\n        // Normalise gradients\n        vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n        p0 *= norm.x;\n        p1 *= norm.y;\n        p2 *= norm.z;\n        p3 *= norm.w;\n        p4 *= taylorInvSqrt(dot(p4,p4));\n\n        // Mix contributions from the five corners\n        vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n        vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n        m0 = m0 * m0;\n        m1 = m1 * m1;\n        return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n                    + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n        }\n\n        vec3 hsv2rgb(vec3 c) {\n            vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n            vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n            return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n        }\n\n        void main() {\n          vUv = uv;\n          vNormal = normal;\n\n          float noise = snoise(vec4(position* (uFrequency - 120.0) * 0.01, uTime *0.1));\n\n          vColor = hsv2rgb(vec3( noise * sin(uTime)  , 0.8, 1.0));\n          \n          vec3 newPos = position + abs(uFrequency - 120.0) * normal * noise;\n        //   if(newPos.y > 0.5){\n        //    newPos +=50.8 * normal * noise;\n        //   }\n\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(newPos, 1.0);\n        }\n      ",fragmentShader:"\n        varying vec2 vUv;\n        varying vec3 vNormal;\n        varying vec3 vColor;\n        void main() {\n          gl_FragColor = vec4(vColor, 1.0);\n        }\n      "});this.mesh=new c(e,i),this.mesh.onBeforeRender=()=>{var n;i.uniforms.uTime.value+=.01,i.uniforms.uFrequency.value=(null==(n=this.analyser)?void 0:n.getAverageFrequency())||0},null==(n=this.scene)||n.add(this.mesh)}getAudioData(){var n;null==(n=this.camera)||n.add(this.listener),this.sound=new v(this.listener),this.audioLoader.load("./music/xiaomeiman.mp3",(n=>{var e,i;null==(e=this.sound)||e.setBuffer(n),null==(i=this.sound)||i.play()})),this.analyser=new l(this.sound,32)}onUnmounted(){var n,e,i;null==(n=this.sound)||n.pause(),null==(e=this.camera)||e.remove(this.listener),null==(i=this.scene)||i.remove(this.mesh)}animate(){var n,e;null==(n=this.stats)||n.begin(),requestAnimationFrame((()=>{this.animate()})),this.renderer&&this.renderer.render(this.scene,this.camera),null==(e=this.stats)||e.end()}},b=()=>{m.value||(z.getAudioData(),m.value=!0)};return x((()=>{z.load()})),p((()=>{z.gui.close(),z.gui.destroy(),z.onUnmounted()})),(n,e)=>(g(),d(f,null,[e[0]||(e[0]=y("div",{id:"webgl"},null,-1)),e[1]||(e[1]=y("div",{class:"title-name"},"music",-1)),m.value?w("",!0):(g(),d("div",{key:0,class:h(["measure"]),onClick:b}," click play ")),e[2]||(e[2]=y("audio",{id:"audio",src:"../../public/music/xiaomeiman.mp3"},null,-1))],64))}}),[["__scopeId","data-v-13e7c459"]]);export{b as default};
